
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\007\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\004\000\002\004\002" +
    "\000\002\005\004\000\002\005\002\000\002\006\004\000" +
    "\002\006\002\000\002\007\007\000\002\007\006\000\002" +
    "\007\010\000\002\010\004\000\002\010\002\000\002\011" +
    "\014\000\002\011\014\000\002\012\003\000\002\012\002" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\014\003\000\002\014\002\000\002" +
    "\015\005\000\002\015\003\000\002\016\004\000\002\016" +
    "\006\000\002\017\004\000\002\017\002\000\002\020\003" +
    "\000\002\020\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\011\000\002\034\007\000\002\034\011\000\002\035" +
    "\007\000\002\036\007\000\002\030\006\000\002\030\007" +
    "\000\002\030\007\000\002\030\007\000\002\030\006\000" +
    "\002\030\007\000\002\030\004\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\007\000\002\021" +
    "\003\000\002\021\006\000\002\022\005\000\002\022\003" +
    "\000\002\023\005\000\002\023\003\000\002\024\005\000" +
    "\002\024\003\000\002\025\003\000\002\025\002\000\002" +
    "\026\003\000\002\026\005\000\002\026\006\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\005\000" +
    "\002\026\004\000\002\026\004\000\002\026\004\000\002" +
    "\026\006\000\002\026\003\000\002\026\011\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\004\005\001\002\000\004\002\310\001" +
    "\002\000\004\060\006\001\002\000\004\033\007\001\002" +
    "\000\020\005\020\006\015\007\010\010\021\011\013\012" +
    "\022\034\ufffc\001\002\000\006\030\uffee\060\uffee\001\002" +
    "\000\016\006\015\007\010\010\021\011\013\012\022\034" +
    "\ufff8\001\002\000\004\034\302\001\002\000\006\030\uffec" +
    "\060\uffec\001\002\000\020\005\020\006\015\007\010\010" +
    "\021\011\013\012\022\034\ufffc\001\002\000\004\060\270" +
    "\001\002\000\004\060\125\001\002\000\004\034\uffff\001" +
    "\002\000\012\007\010\010\021\011\013\012\022\001\002" +
    "\000\006\030\uffed\060\uffed\001\002\000\006\030\uffeb\060" +
    "\uffeb\001\002\000\004\060\024\001\002\000\006\025\ufff3" +
    "\036\025\001\002\000\030\020\034\021\037\027\040\035" +
    "\036\041\035\042\030\057\032\060\041\061\043\062\045" +
    "\063\033\001\002\000\004\025\027\001\002\000\040\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\015\ufff7\016\ufff7\022\ufff7\023\ufff7\024\ufff7\033\ufff7\034" +
    "\ufff7\060\ufff7\001\002\000\030\020\034\021\037\027\040" +
    "\035\036\041\035\042\030\057\032\060\041\061\043\062" +
    "\045\063\033\001\002\000\046\025\uffc1\026\uffc1\030\uffc1" +
    "\032\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\055\uffc1\056\uffc1\001\002\000\046\025\uffbe\026\uffbe\030" +
    "\uffbe\032\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\055\uffbe\056\uffbe\001\002\000\046\025\uffbc\026\uffbc" +
    "\030\uffbc\032\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\055\uffbc\056\uffbc\001\002\000\046\025\uffba\026" +
    "\uffba\030\uffba\032\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051" +
    "\uffba\052\uffba\055\uffba\056\uffba\001\002\000\030\020\034" +
    "\021\037\027\040\035\036\041\035\042\030\057\032\060" +
    "\041\061\043\062\045\063\033\001\002\000\030\020\034" +
    "\021\037\027\040\035\036\041\035\042\030\057\032\060" +
    "\041\061\043\062\045\063\033\001\002\000\046\025\uffb9" +
    "\026\uffb9\030\uffb9\032\uffb9\037\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\055\uffb9\056\uffb9\001\002\000\040\007" +
    "\010\010\021\011\013\012\022\020\034\021\037\027\040" +
    "\035\036\041\035\042\030\057\032\060\041\061\043\062" +
    "\045\063\033\001\002\000\052\025\uffcb\026\uffcb\027\076" +
    "\030\uffcb\031\077\032\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\055\uffcb\056\uffcb\001\002\000\046\025" +
    "\uffb3\026\uffb3\030\uffb3\032\uffb3\037\uffb3\040\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\055\uffb3\056\uffb3\001\002\000\046" +
    "\025\uffbd\026\uffbd\030\uffbd\032\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\055\uffbd\056\uffbd\001\002\000" +
    "\034\025\ufff4\037\051\040\054\041\052\042\046\043\056" +
    "\044\053\045\061\046\057\047\055\050\050\051\060\052" +
    "\047\001\002\000\046\025\uffbb\026\uffbb\030\uffbb\032\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\055\uffbb" +
    "\056\uffbb\001\002\000\030\020\034\021\037\027\040\035" +
    "\036\041\035\042\030\057\032\060\041\061\043\062\045" +
    "\063\033\001\002\000\030\020\034\021\037\027\040\035" +
    "\036\041\035\042\030\057\032\060\041\061\043\062\045" +
    "\063\033\001\002\000\030\020\034\021\037\027\040\035" +
    "\036\041\035\042\030\057\032\060\041\061\043\062\045" +
    "\063\033\001\002\000\030\020\034\021\037\027\040\035" +
    "\036\041\035\042\030\057\032\060\041\061\043\062\045" +
    "\063\033\001\002\000\030\020\034\021\037\027\040\035" +
    "\036\041\035\042\030\057\032\060\041\061\043\062\045" +
    "\063\033\001\002\000\030\020\034\021\037\027\040\035" +
    "\036\041\035\042\030\057\032\060\041\061\043\062\045" +
    "\063\033\001\002\000\030\020\034\021\037\027\040\035" +
    "\036\041\035\042\030\057\032\060\041\061\043\062\045" +
    "\063\033\001\002\000\030\020\034\021\037\027\040\035" +
    "\036\041\035\042\030\057\032\060\041\061\043\062\045" +
    "\063\033\001\002\000\030\020\034\021\037\027\040\035" +
    "\036\041\035\042\030\057\032\060\041\061\043\062\045" +
    "\063\033\001\002\000\030\020\034\021\037\027\040\035" +
    "\036\041\035\042\030\057\032\060\041\061\043\062\045" +
    "\063\033\001\002\000\030\020\034\021\037\027\040\035" +
    "\036\041\035\042\030\057\032\060\041\061\043\062\045" +
    "\063\033\001\002\000\030\020\034\021\037\027\040\035" +
    "\036\041\035\042\030\057\032\060\041\061\043\062\045" +
    "\063\033\001\002\000\046\025\uffab\026\uffab\030\uffab\032" +
    "\uffab\037\051\040\054\041\052\042\046\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\055" +
    "\uffab\056\uffab\001\002\000\046\025\uffa7\026\uffa7\030\uffa7" +
    "\032\uffa7\037\051\040\054\041\052\042\046\043\056\044" +
    "\053\045\061\046\057\047\055\050\050\051\uffa7\052\047" +
    "\055\uffa7\056\uffa7\001\002\000\046\025\uffaa\026\uffaa\030" +
    "\uffaa\032\uffaa\037\051\040\054\041\052\042\046\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052" +
    "\uffaa\055\uffaa\056\uffaa\001\002\000\046\025\uffad\026\uffad" +
    "\030\uffad\032\uffad\037\051\040\054\041\052\042\046\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\052\uffad\055\uffad\056\uffad\001\002\000\046\025\uffa9\026" +
    "\uffa9\030\uffa9\032\uffa9\037\051\040\054\041\052\042\046" +
    "\043\056\044\053\045\061\046\057\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\055\uffa9\056\uffa9\001\002\000\046\025\uffb0" +
    "\026\uffb0\030\uffb0\032\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\055\uffb0\056\uffb0\001\002\000\046\025" +
    "\uffac\026\uffac\030\uffac\032\uffac\037\051\040\054\041\052" +
    "\042\046\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\055\uffac\056\uffac\001\002\000\046" +
    "\025\uffaf\026\uffaf\030\uffaf\032\uffaf\037\051\040\054\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\055\uffaf\056\uffaf\001\002\000" +
    "\046\025\uffb1\026\uffb1\030\uffb1\032\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\055\uffb1\056\uffb1\001\002" +
    "\000\046\025\uffa8\026\uffa8\030\uffa8\032\uffa8\037\051\040" +
    "\054\041\052\042\046\043\056\044\053\045\061\046\057" +
    "\047\uffa8\050\uffa8\051\uffa8\052\uffa8\055\uffa8\056\uffa8\001" +
    "\002\000\046\025\uffa6\026\uffa6\030\uffa6\032\uffa6\037\051" +
    "\040\054\041\052\042\046\043\056\044\053\045\061\046" +
    "\057\047\055\050\050\051\uffa6\052\uffa6\055\uffa6\056\uffa6" +
    "\001\002\000\046\025\uffae\026\uffae\030\uffae\032\uffae\037" +
    "\051\040\054\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae" +
    "\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\055\uffae\056" +
    "\uffae\001\002\000\032\020\034\021\037\027\040\030\103" +
    "\035\036\041\035\042\030\057\032\060\041\061\043\062" +
    "\045\063\033\001\002\000\030\020\034\021\037\027\040" +
    "\035\036\041\035\042\030\057\032\060\041\061\043\062" +
    "\045\063\033\001\002\000\034\032\101\037\051\040\054" +
    "\041\052\042\046\043\056\044\053\045\061\046\057\047" +
    "\055\050\050\051\060\052\047\001\002\000\054\025\uffca" +
    "\026\uffca\030\uffca\032\uffca\036\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056" +
    "\uffca\001\002\000\004\030\107\001\002\000\046\025\uffc0" +
    "\026\uffc0\030\uffc0\032\uffc0\037\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\055\uffc0\056\uffc0\001\002\000\036\026" +
    "\105\030\uffc8\037\051\040\054\041\052\042\046\043\056" +
    "\044\053\045\061\046\057\047\055\050\050\051\060\052" +
    "\047\001\002\000\030\020\034\021\037\027\040\035\036" +
    "\041\035\042\030\057\032\060\041\061\043\062\045\063" +
    "\033\001\002\000\004\030\uffc9\001\002\000\046\025\uffbf" +
    "\026\uffbf\030\uffbf\032\uffbf\037\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\055\uffbf\056\uffbf\001\002\000\036\030" +
    "\114\037\051\040\054\041\052\042\046\043\056\044\053" +
    "\045\061\046\057\047\055\050\050\051\060\052\047\055" +
    "\115\001\002\000\004\030\112\001\002\000\030\020\034" +
    "\021\037\027\040\035\036\041\035\042\030\057\032\060" +
    "\041\061\043\062\045\063\033\001\002\000\046\025\uffb4" +
    "\026\uffb4\030\uffb4\032\uffb4\037\051\040\054\041\052\042" +
    "\046\043\056\044\053\045\061\046\057\047\055\050\050" +
    "\051\060\052\047\055\uffb4\056\uffb4\001\002\000\046\025" +
    "\uffb8\026\uffb8\030\uffb8\032\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\055\uffb8\056\uffb8\001\002\000\030" +
    "\020\034\021\037\027\040\035\036\041\035\042\030\057" +
    "\032\060\041\061\043\062\045\063\033\001\002\000\034" +
    "\037\051\040\054\041\052\042\046\043\056\044\053\045" +
    "\061\046\057\047\055\050\050\051\060\052\047\056\117" +
    "\001\002\000\030\020\034\021\037\027\040\035\036\041" +
    "\035\042\030\057\032\060\041\061\043\062\045\063\033" +
    "\001\002\000\034\030\121\037\051\040\054\041\052\042" +
    "\046\043\056\044\053\045\061\046\057\047\055\050\050" +
    "\051\060\052\047\001\002\000\046\025\uffb2\026\uffb2\030" +
    "\uffb2\032\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\055\uffb2\056\uffb2\001\002\000\046\025\uffb7\026\uffb7" +
    "\030\uffb7\032\uffb7\037\051\040\054\041\052\042\046\043" +
    "\056\044\053\045\061\046\057\047\055\050\050\051\060" +
    "\052\047\055\uffb7\056\uffb7\001\002\000\046\025\uffb5\026" +
    "\uffb5\030\uffb5\032\uffb5\037\051\040\054\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\055\uffb5\056\uffb5\001\002\000\046\025\uffb6" +
    "\026\uffb6\030\uffb6\032\uffb6\037\051\040\054\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\055\uffb6\056\uffb6\001\002\000\012\025" +
    "\ufff3\027\126\031\127\036\025\001\002\000\014\007\010" +
    "\010\021\011\013\012\022\030\uffe9\001\002\000\004\057" +
    "\132\001\002\000\004\025\131\001\002\000\040\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015" +
    "\ufff6\016\ufff6\022\ufff6\023\ufff6\024\ufff6\033\ufff6\034\ufff6" +
    "\060\ufff6\001\002\000\004\032\133\001\002\000\004\025" +
    "\134\001\002\000\040\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\015\ufff5\016\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\033\ufff5\034\ufff5\060\ufff5\001\002\000\006" +
    "\026\266\030\uffe7\001\002\000\004\030\uffea\001\002\000" +
    "\004\060\263\001\002\000\004\030\141\001\002\000\004" +
    "\033\142\001\002\000\036\005\020\007\010\010\021\011" +
    "\013\012\022\013\ufffa\015\ufffa\016\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\033\ufffa\034\ufffa\060\ufffa\001\002\000\036\005" +
    "\020\007\010\010\021\011\013\012\022\013\ufffa\015\ufffa" +
    "\016\ufffa\022\ufffa\023\ufffa\024\ufffa\033\ufffa\034\ufffa\060" +
    "\ufffa\001\002\000\004\060\261\001\002\000\024\013\155" +
    "\015\150\016\153\022\146\023\162\024\152\033\163\034" +
    "\uffe3\060\156\001\002\000\004\027\255\001\002\000\024" +
    "\013\uffdd\015\uffdd\016\uffdd\022\uffdd\023\uffdd\024\uffdd\033" +
    "\uffdd\034\uffdd\060\uffdd\001\002\000\004\027\250\001\002" +
    "\000\026\013\uffdf\015\uffdf\016\uffdf\017\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\033\uffdf\034\uffdf\060\uffdf\001\002\000\004" +
    "\027\243\001\002\000\032\020\034\021\037\025\240\027" +
    "\040\035\036\041\035\042\030\057\032\060\041\061\043" +
    "\062\045\063\033\001\002\000\024\013\uffe2\015\uffe2\016" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\033\uffe2\034\uffe2\060\uffe2" +
    "\001\002\000\004\027\230\001\002\000\014\027\222\031" +
    "\077\036\uffcb\053\uffcb\054\uffcb\001\002\000\024\013\uffdc" +
    "\015\uffdc\016\uffdc\022\uffdc\023\uffdc\024\uffdc\033\uffdc\034" +
    "\uffdc\060\uffdc\001\002\000\026\013\uffde\015\uffde\016\uffde" +
    "\017\uffde\022\uffde\023\uffde\024\uffde\033\uffde\034\uffde\060" +
    "\uffde\001\002\000\004\034\220\001\002\000\004\027\205" +
    "\001\002\000\036\005\020\007\010\010\021\011\013\012" +
    "\022\013\ufffa\015\ufffa\016\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\033\ufffa\034\ufffa\060\ufffa\001\002\000\024\013\uffe1\015" +
    "\uffe1\016\uffe1\022\uffe1\023\uffe1\024\uffe1\033\uffe1\034\uffe1" +
    "\060\uffe1\001\002\000\026\013\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\033\uffe0\034\uffe0\060\uffe0" +
    "\001\002\000\024\013\155\015\150\016\153\022\146\023" +
    "\162\024\152\033\163\034\uffe3\060\156\001\002\000\010" +
    "\036\170\053\172\054\171\001\002\000\030\020\034\021" +
    "\037\027\040\035\036\041\035\042\030\057\032\060\041" +
    "\061\043\062\045\063\033\001\002\000\004\025\174\001" +
    "\002\000\004\025\173\001\002\000\026\013\uffce\015\uffce" +
    "\016\uffce\017\uffce\022\uffce\023\uffce\024\uffce\033\uffce\034" +
    "\uffce\060\uffce\001\002\000\026\013\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\022\uffcd\023\uffcd\024\uffcd\033\uffcd\034\uffcd\060" +
    "\uffcd\001\002\000\034\025\176\037\051\040\054\041\052" +
    "\042\046\043\056\044\053\045\061\046\057\047\055\050" +
    "\050\051\060\052\047\001\002\000\026\013\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\022\uffd6\023\uffd6\024\uffd6\033\uffd6\034" +
    "\uffd6\060\uffd6\001\002\000\004\034\uffe4\001\002\000\024" +
    "\013\155\015\150\016\153\022\146\023\162\024\152\033" +
    "\163\034\uffe3\060\156\001\002\000\004\034\202\001\002" +
    "\000\030\013\uffef\015\uffef\016\uffef\017\uffef\022\uffef\023" +
    "\uffef\024\uffef\025\204\033\uffef\034\uffef\060\uffef\001\002" +
    "\000\026\013\uffcc\015\uffcc\016\uffcc\017\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\033\uffcc\034\uffcc\060\uffcc\001\002\000\040" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\022\ufff0\023\ufff0\024\ufff0\033\ufff0" +
    "\034\ufff0\060\ufff0\001\002\000\030\020\034\021\037\027" +
    "\040\035\036\041\035\042\030\057\032\060\041\061\043" +
    "\062\045\063\033\001\002\000\004\030\216\001\002\000" +
    "\036\026\210\030\uffc4\037\051\040\054\041\052\042\046" +
    "\043\056\044\053\045\061\046\057\047\055\050\050\051" +
    "\060\052\047\001\002\000\004\060\211\001\002\000\010" +
    "\026\uffcb\030\uffcb\031\077\001\002\000\006\026\214\030" +
    "\uffc6\001\002\000\004\030\uffc5\001\002\000\030\020\034" +
    "\021\037\027\040\035\036\041\035\042\030\057\032\060" +
    "\041\061\043\062\045\063\033\001\002\000\004\030\uffc7" +
    "\001\002\000\004\025\217\001\002\000\026\013\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\022\uffd4\023\uffd4\024\uffd4\033\uffd4" +
    "\034\uffd4\060\uffd4\001\002\000\020\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\025\204\034\uffef\001\002\000\016" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\034\ufff2\001" +
    "\002\000\032\020\034\021\037\027\040\030\224\035\036" +
    "\041\035\042\030\057\032\060\041\061\043\062\045\063" +
    "\033\001\002\000\004\030\226\001\002\000\004\025\225" +
    "\001\002\000\026\013\uffd2\015\uffd2\016\uffd2\017\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\033\uffd2\034\uffd2\060\uffd2\001\002" +
    "\000\004\025\227\001\002\000\026\013\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\022\uffd1\023\uffd1\024\uffd1\033\uffd1\034\uffd1" +
    "\060\uffd1\001\002\000\030\020\034\021\037\027\040\035" +
    "\036\041\035\042\030\057\032\060\041\061\043\062\045" +
    "\063\033\001\002\000\034\030\232\037\051\040\054\041" +
    "\052\042\046\043\056\044\053\045\061\046\057\047\055" +
    "\050\050\051\060\052\047\001\002\000\022\013\155\015" +
    "\150\016\153\022\146\023\162\024\152\033\163\060\156" +
    "\001\002\000\024\013\uffda\015\uffda\016\uffda\022\uffda\023" +
    "\uffda\024\uffda\033\uffda\034\uffda\060\uffda\001\002\000\026" +
    "\013\uffe2\015\uffe2\016\uffe2\017\235\022\uffe2\023\uffe2\024" +
    "\uffe2\033\uffe2\034\uffe2\060\uffe2\001\002\000\022\013\155" +
    "\015\150\016\153\022\146\023\162\024\152\033\163\060" +
    "\156\001\002\000\026\013\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\033\uffdb\034\uffdb\060\uffdb\001" +
    "\002\000\024\013\uffd9\015\uffd9\016\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\033\uffd9\034\uffd9\060\uffd9\001\002\000\026\013" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\033\uffd0\034\uffd0\060\uffd0\001\002\000\034\025\242\037" +
    "\051\040\054\041\052\042\046\043\056\044\053\045\061" +
    "\046\057\047\055\050\050\051\060\052\047\001\002\000" +
    "\026\013\uffcf\015\uffcf\016\uffcf\017\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\033\uffcf\034\uffcf\060\uffcf\001\002\000\032\020" +
    "\034\021\037\027\040\030\uffc2\035\036\041\035\042\030" +
    "\057\032\060\041\061\043\062\045\063\033\001\002\000" +
    "\004\030\uffc3\001\002\000\004\030\246\001\002\000\004" +
    "\025\247\001\002\000\026\013\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\033\uffd3\034\uffd3\060\uffd3" +
    "\001\002\000\030\020\034\021\037\027\040\035\036\041" +
    "\035\042\030\057\032\060\041\061\043\062\045\063\033" +
    "\001\002\000\034\030\252\037\051\040\054\041\052\042" +
    "\046\043\056\044\053\045\061\046\057\047\055\050\050" +
    "\051\060\052\047\001\002\000\022\013\155\015\150\016" +
    "\153\022\146\023\162\024\152\033\163\060\156\001\002" +
    "\000\026\013\uffd8\015\uffd8\016\uffd8\017\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\033\uffd8\034\uffd8\060\uffd8\001\002\000\024" +
    "\013\uffd7\015\uffd7\016\uffd7\022\uffd7\023\uffd7\024\uffd7\033" +
    "\uffd7\034\uffd7\060\uffd7\001\002\000\004\060\211\001\002" +
    "\000\004\030\257\001\002\000\004\025\260\001\002\000" +
    "\026\013\uffd5\015\uffd5\016\uffd5\017\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\033\uffd5\034\uffd5\060\uffd5\001\002\000\010\025" +
    "\ufff3\031\127\036\025\001\002\000\024\013\ufffb\015\ufffb" +
    "\016\ufffb\022\ufffb\023\ufffb\024\ufffb\033\ufffb\034\ufffb\060" +
    "\ufffb\001\002\000\010\026\uffe6\030\uffe6\031\264\001\002" +
    "\000\004\032\265\001\002\000\006\026\uffe5\030\uffe5\001" +
    "\002\000\012\007\010\010\021\011\013\012\022\001\002" +
    "\000\004\030\uffe8\001\002\000\004\027\271\001\002\000" +
    "\014\007\010\010\021\011\013\012\022\030\uffe9\001\002" +
    "\000\004\030\273\001\002\000\004\033\274\001\002\000" +
    "\036\005\020\007\010\010\021\011\013\012\022\013\ufffa" +
    "\015\ufffa\016\ufffa\022\ufffa\023\ufffa\024\ufffa\033\ufffa\034" +
    "\ufffa\060\ufffa\001\002\000\024\013\155\015\150\016\153" +
    "\022\146\023\162\024\152\033\163\034\uffe3\060\156\001" +
    "\002\000\004\034\277\001\002\000\020\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\025\204\034\uffef\001\002\000" +
    "\016\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\034\ufff1" +
    "\001\002\000\004\034\ufffe\001\002\000\004\002\001\001" +
    "\002\000\016\006\015\007\010\010\021\011\013\012\022" +
    "\034\ufff8\001\002\000\004\034\ufffd\001\002\000\004\060" +
    "\306\001\002\000\004\027\126\001\002\000\004\034\ufff9" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\011\004\016" +
    "\007\013\011\010\013\015\001\001\000\002\001\001\000" +
    "\010\006\303\011\302\013\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\300\007\013\011\010\013" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\025\001\001" +
    "\000\010\021\030\026\043\027\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\030\026\123\027\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\030\026\122\027\041" +
    "\001\001\000\010\021\030\026\121\027\041\001\001\000" +
    "\002\001\001\000\012\013\110\021\030\026\107\027\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\030" +
    "\026\074\027\041\001\001\000\010\021\030\026\073\027" +
    "\041\001\001\000\010\021\030\026\072\027\041\001\001" +
    "\000\010\021\030\026\071\027\041\001\001\000\010\021" +
    "\030\026\070\027\041\001\001\000\010\021\030\026\067" +
    "\027\041\001\001\000\010\021\030\026\066\027\041\001" +
    "\001\000\010\021\030\026\065\027\041\001\001\000\010" +
    "\021\030\026\064\027\041\001\001\000\010\021\030\026" +
    "\063\027\041\001\001\000\010\021\030\026\062\027\041" +
    "\001\001\000\010\021\030\026\061\027\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\030\022" +
    "\101\026\103\027\041\001\001\000\010\021\030\026\077" +
    "\027\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\030\022\105\026\103\027\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\030\026\112\027\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\030\026\115\027\041" +
    "\001\001\000\002\001\001\000\010\021\030\026\117\027" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\127\001\001\000\012\013\136\014\137\015\135\016\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\144\007\142" +
    "\013\143\001\001\000\010\005\261\007\142\013\143\001" +
    "\001\000\002\001\001\000\026\017\160\020\165\021\166" +
    "\030\157\031\153\032\163\033\164\034\146\035\150\036" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\030\026\240\027\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\177" +
    "\007\142\013\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\017\176\020\165\021\166\030\157\031\153" +
    "\032\163\033\164\034\146\035\150\036\156\001\001\000" +
    "\002\001\001\000\010\021\030\026\174\027\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\017\200\020\165\021\166\030\157\031" +
    "\153\032\163\033\164\034\146\035\150\036\156\001\001" +
    "\000\002\001\001\000\004\012\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\030\024\205\026\206" +
    "\027\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\211\023\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\021\030\022\214\026" +
    "\103\027\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\220\001\001\000\002\001" +
    "\001\000\012\021\030\022\222\026\103\027\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\030\026\230" +
    "\027\041\001\001\000\002\001\001\000\024\020\232\021" +
    "\166\030\157\031\233\032\163\033\164\034\146\035\150" +
    "\036\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\166\030\157\031\235\032\236\033\164\034\146" +
    "\035\150\036\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\021\030\024\243\025\244\026\206\027\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\030\026\250\027\041\001" +
    "\001\000\002\001\001\000\022\021\166\030\157\031\252" +
    "\032\253\033\164\034\146\035\150\036\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\211\023\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\136\015\266\016\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\136\014\271\015\135\016\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\274" +
    "\007\142\013\143\001\001\000\026\017\275\020\165\021" +
    "\166\030\157\031\153\032\163\033\164\034\146\035\150" +
    "\036\156\001\001\000\002\001\001\000\004\012\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\306\011\302\013\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= CLASS ID OPENCB memberdecls CLOSECB 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Memberdecls md = (Memberdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(i, md); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= fieldsmethods 
            {
              Memberdecls RESULT =null;
		int fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fieldsmethods fm = (Fieldsmethods)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Memberdecls(fm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fieldsmethods ::= fielddecl fieldsmethods 
            {
              Fieldsmethods RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl f = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fieldsmethods fm = (Fieldsmethods)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Fieldsmethods(f, fm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldsmethods",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fieldsmethods ::= methoddecl methoddecls 
            {
              Fieldsmethods RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Methoddecl md = (Methoddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls mds = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Fieldsmethods(md, mds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldsmethods",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fieldsmethods ::= 
            {
              Fieldsmethods RESULT =null;
		 RESULT = new Fieldsmethods(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldsmethods",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fielddecls ::= fielddecl fielddecls 
            {
              Fielddecls RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl fd = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecls fds = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Fielddecls(fd, fds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fielddecls ::= 
            {
              Fielddecls RESULT =null;
		 RESULT = new Fielddecls(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // methoddecls ::= methoddecl methoddecls 
            {
              Methoddecls RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Methoddecl md = (Methoddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls mds = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecls(md, mds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // methoddecls ::= 
            {
              Methoddecls RESULT =null;
		 RESULT = new Methoddecls(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fielddecl ::= FINAL type ID optionalexpr SEMI 
            {
              Fielddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Optionalexpr oe = (Optionalexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Fielddecl(true, t, i, oe); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fielddecl ::= type ID optionalexpr SEMI 
            {
              Fielddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Optionalexpr oe = (Optionalexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Fielddecl(false, t, i, oe); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fielddecl ::= type ID OPENSB INTLIT CLOSESB SEMI 
            {
              Fielddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Fielddecl(t, i, il); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // optionalexpr ::= ASSMNT expr 
            {
              Optionalexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Optionalexpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // optionalexpr ::= 
            {
              Optionalexpr RESULT =null;
		 RESULT = new Optionalexpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // methoddecl ::= type ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi 
            {
              Methoddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Argdecls a = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fds = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts s = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi os = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecl(t, i, a, fds, s, os); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methoddecl ::= VOID ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi 
            {
              Methoddecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Argdecls a = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fds = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts s = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi os = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecl(true, i, a, fds, s, os); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // optionalsemi ::= SEMI 
            {
              Optionalsemi RESULT =null;
		 RESULT = new Optionalsemi(";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // optionalsemi ::= 
            {
              Optionalsemi RESULT =null;
		 RESULT = new Optionalsemi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = new Type(2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type(3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new Type(4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // argdecls ::= argdeclList 
            {
              Argdecls RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgdeclList al = (ArgdeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Argdecls(al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // argdecls ::= 
            {
              Argdecls RESULT =null;
		 RESULT = new Argdecls(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // argdeclList ::= argdecl COMMA argdeclList 
            {
              ArgdeclList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argdecl a = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgdeclList al = (ArgdeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgdeclList(a, al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // argdeclList ::= argdecl 
            {
              ArgdeclList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argdecl a = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgdeclList(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // argdecl ::= type ID 
            {
              Argdecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Argdecl(false, t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argdecl ::= type ID OPENSB CLOSESB 
            {
              Argdecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Argdecl(true, t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmts ::= stmt stmts 
            {
              Stmts RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmts ss = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmts(s, ss); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmts ::= 
            {
              Stmts RESULT =null;
		 RESULT = new Stmts(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= stmtMatched 
            {
              Stmt RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt sm = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  sm; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= stmtUnmatched 
            {
              Stmt RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int suright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt su = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = su; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmtMatched ::= ifMatched 
            {
              Stmt RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int imright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt im = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = im; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtMatched",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmtMatched ::= whileMatched 
            {
              Stmt RESULT =null;
		int wmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt wm = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = wm; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtMatched",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmtMatched ::= standardStmt 
            {
              Stmt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt ss = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtMatched",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmtUnmatched ::= ifUnmatched 
            {
              Stmt RESULT =null;
		int iuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt iu = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = iu; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtUnmatched",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmtUnmatched ::= whileUnmatched 
            {
              Stmt RESULT =null;
		int wuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt wu = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = wu; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtUnmatched",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ifMatched ::= IF OPENP expr CLOSEP stmtMatched ELSE stmtMatched 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmt s1 = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s2 = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(14, e, s1, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifMatched",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ifUnmatched ::= IF OPENP expr CLOSEP stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(15, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifUnmatched",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ifUnmatched ::= IF OPENP expr CLOSEP stmtMatched ELSE stmtUnmatched 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmt sm = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int suleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int suright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt su = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(16, e, sm, su); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifUnmatched",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // whileMatched ::= WHILE OPENP expr CLOSEP stmtMatched 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(1, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileMatched",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // whileUnmatched ::= WHILE OPENP expr CLOSEP stmtUnmatched 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(2, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileUnmatched",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // standardStmt ::= name ASSMNT expr SEMI 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Stmt(3, n, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("standardStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // standardStmt ::= READ OPENP readlist CLOSEP SEMI 
            {
              Stmt RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Readlist rl = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(4, rl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("standardStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // standardStmt ::= PRINT OPENP printlist CLOSEP SEMI 
            {
              Stmt RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlist pl = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(5, pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("standardStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // standardStmt ::= PRINTL OPENP printlinelist CLOSEP SEMI 
            {
              Stmt RESULT =null;
		int pllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlinelist pll = (Printlinelist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(6, pll); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("standardStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // standardStmt ::= ID OPENP CLOSEP SEMI 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Stmt(7, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("standardStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // standardStmt ::= ID OPENP args CLOSEP SEMI 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(8, i, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("standardStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // standardStmt ::= RETURN SEMI 
            {
              Stmt RESULT =null;
		 RESULT = new Stmt(9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("standardStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // standardStmt ::= RETURN expr SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Stmt(10, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("standardStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // standardStmt ::= name INCREMENT SEMI 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(11, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("standardStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // standardStmt ::= name DECREMENT SEMI 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(12, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("standardStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // standardStmt ::= OPENCB fielddecls stmts CLOSECB optionalsemi 
            {
              Stmt RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fds = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts s = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi os = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(13, fds, s, os); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("standardStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // name ::= ID 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Name(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // name ::= ID OPENSB expr CLOSESB 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Name(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // args ::= expr COMMA args 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Args(e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // args ::= expr 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Args(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // readlist ::= name COMMA args 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Readlist(n, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // readlist ::= name 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Readlist(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // printlist ::= expr COMMA readlist 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Readlist rl = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Printlist(e, rl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // printlist ::= expr 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Printlist(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // printlinelist ::= printlist 
            {
              Printlinelist RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist pl = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Printlinelist(pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // printlinelist ::= 
            {
              Printlinelist RESULT =null;
		 RESULT = new Printlinelist(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= name 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(1, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= ID OPENP CLOSEP 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Expr(2, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= ID OPENP args CLOSEP 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(3, i, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= INTLIT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(4, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= CHARLIT 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(5, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= STRLIT 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(6, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= FLOATLIT 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(7, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new Expr(8, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new Expr(8, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= OPENP expr CLOSEP 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(9, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= TILDE expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(10, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(11, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= PLUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(12, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= OPENP type CLOSEP expr 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(13, t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= binaryop 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Binaryop b = (Binaryop)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(14, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= OPENP expr QUESTIONMARK expr COLON expr CLOSEP 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(15, e1, e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binaryop ::= expr MULT expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "*", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // binaryop ::= expr DIV expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "/", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // binaryop ::= expr PLUS expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "+", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // binaryop ::= expr MINUS expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "-", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // binaryop ::= expr LESSTHAN expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "<", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // binaryop ::= expr GREATERTHAN expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, ">", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binaryop ::= expr LEQ expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "<=", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // binaryop ::= expr GEQ expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, ">=", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // binaryop ::= expr EQUALTO expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "==", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // binaryop ::= expr ANGLEB expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "<>", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // binaryop ::= expr OR expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "||", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // binaryop ::= expr AND expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "&&", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
