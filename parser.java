
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\004" +
    "\000\002\005\004\000\002\005\002\000\002\006\007\000" +
    "\002\006\006\000\002\006\010\000\002\007\004\000\002" +
    "\007\002\000\002\010\014\000\002\010\014\000\002\011" +
    "\003\000\002\011\002\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\003\000" +
    "\002\013\002\000\002\014\005\000\002\014\003\000\002" +
    "\015\004\000\002\015\006\000\002\016\004\000\002\016" +
    "\002\000\002\017\010\000\002\017\007\000\002\017\006" +
    "\000\002\017\007\000\002\017\007\000\002\017\007\000" +
    "\002\017\006\000\002\017\007\000\002\017\004\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\007\000\002\020\005\000\002\020\003\000\002\021\003" +
    "\000\002\021\006\000\002\022\005\000\002\022\003\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\003\000\002\025\003\000\002\025\002\000\002\026" +
    "\003\000\002\026\005\000\002\026\006\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\005\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\026" +
    "\006\000\002\026\003\000\002\026\011\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\004\004\005\001\002\000\004\002\301\001" +
    "\002\000\004\060\006\001\002\000\004\033\007\001\002" +
    "\000\020\005\021\006\016\007\010\010\022\011\013\012" +
    "\023\034\ufffa\001\002\000\006\030\ufff0\060\ufff0\001\002" +
    "\000\016\006\016\007\010\010\022\011\013\012\023\034" +
    "\ufffa\001\002\000\004\034\277\001\002\000\006\030\uffee" +
    "\060\uffee\001\002\000\020\005\021\006\016\007\010\010" +
    "\022\011\013\012\023\034\ufffa\001\002\000\004\034\ufffd" +
    "\001\002\000\004\060\265\001\002\000\016\006\016\007" +
    "\010\010\022\011\013\012\023\034\ufffa\001\002\000\004" +
    "\060\126\001\002\000\012\007\010\010\022\011\013\012" +
    "\023\001\002\000\006\030\uffef\060\uffef\001\002\000\006" +
    "\030\uffed\060\uffed\001\002\000\004\060\025\001\002\000" +
    "\006\025\ufff5\036\026\001\002\000\030\020\035\021\040" +
    "\027\041\035\037\041\036\042\031\057\033\060\042\061" +
    "\044\062\046\063\034\001\002\000\004\025\030\001\002" +
    "\000\020\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\034\ufff9\001\002\000\030\020\035\021\040\027\041" +
    "\035\037\041\036\042\031\057\033\060\042\061\044\062" +
    "\046\063\034\001\002\000\046\025\uffcb\026\uffcb\030\uffcb" +
    "\032\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\055\uffcb\056\uffcb\001\002\000\046\025\uffc8\026\uffc8\030" +
    "\uffc8\032\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\055\uffc8\056\uffc8\001\002\000\046\025\uffc6\026\uffc6" +
    "\030\uffc6\032\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\055\uffc6\056\uffc6\001\002\000\046\025\uffc4\026" +
    "\uffc4\030\uffc4\032\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\055\uffc4\056\uffc4\001\002\000\030\020\035" +
    "\021\040\027\041\035\037\041\036\042\031\057\033\060" +
    "\042\061\044\062\046\063\034\001\002\000\030\020\035" +
    "\021\040\027\041\035\037\041\036\042\031\057\033\060" +
    "\042\061\044\062\046\063\034\001\002\000\046\025\uffc3" +
    "\026\uffc3\030\uffc3\032\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\055\uffc3\056\uffc3\001\002\000\040\007" +
    "\010\010\022\011\013\012\023\020\035\021\040\027\041" +
    "\035\037\041\036\042\031\057\033\060\042\061\044\062" +
    "\046\063\034\001\002\000\052\025\uffd5\026\uffd5\027\077" +
    "\030\uffd5\031\100\032\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\055\uffd5\056\uffd5\001\002\000\046\025" +
    "\uffbd\026\uffbd\030\uffbd\032\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\055\uffbd\056\uffbd\001\002\000\046" +
    "\025\uffc7\026\uffc7\030\uffc7\032\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\052\uffc7\055\uffc7\056\uffc7\001\002\000" +
    "\034\025\ufff6\037\052\040\055\041\053\042\050\043\057" +
    "\044\054\045\062\046\060\047\056\050\051\051\061\052" +
    "\047\001\002\000\046\025\uffc5\026\uffc5\030\uffc5\032\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\055\uffc5" +
    "\056\uffc5\001\002\000\030\020\035\021\040\027\041\035" +
    "\037\041\036\042\031\057\033\060\042\061\044\062\046" +
    "\063\034\001\002\000\030\020\035\021\040\027\041\035" +
    "\037\041\036\042\031\057\033\060\042\061\044\062\046" +
    "\063\034\001\002\000\030\020\035\021\040\027\041\035" +
    "\037\041\036\042\031\057\033\060\042\061\044\062\046" +
    "\063\034\001\002\000\030\020\035\021\040\027\041\035" +
    "\037\041\036\042\031\057\033\060\042\061\044\062\046" +
    "\063\034\001\002\000\030\020\035\021\040\027\041\035" +
    "\037\041\036\042\031\057\033\060\042\061\044\062\046" +
    "\063\034\001\002\000\030\020\035\021\040\027\041\035" +
    "\037\041\036\042\031\057\033\060\042\061\044\062\046" +
    "\063\034\001\002\000\030\020\035\021\040\027\041\035" +
    "\037\041\036\042\031\057\033\060\042\061\044\062\046" +
    "\063\034\001\002\000\030\020\035\021\040\027\041\035" +
    "\037\041\036\042\031\057\033\060\042\061\044\062\046" +
    "\063\034\001\002\000\030\020\035\021\040\027\041\035" +
    "\037\041\036\042\031\057\033\060\042\061\044\062\046" +
    "\063\034\001\002\000\030\020\035\021\040\027\041\035" +
    "\037\041\036\042\031\057\033\060\042\061\044\062\046" +
    "\063\034\001\002\000\030\020\035\021\040\027\041\035" +
    "\037\041\036\042\031\057\033\060\042\061\044\062\046" +
    "\063\034\001\002\000\030\020\035\021\040\027\041\035" +
    "\037\041\036\042\031\057\033\060\042\061\044\062\046" +
    "\063\034\001\002\000\046\025\uffb5\026\uffb5\030\uffb5\032" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\045\uffb5\046\uffb5\047\056\050\051\051\uffb5\052\uffb5\055" +
    "\uffb5\056\uffb5\001\002\000\046\025\uffb1\026\uffb1\030\uffb1" +
    "\032\uffb1\037\052\040\055\041\053\042\050\043\057\044" +
    "\054\045\062\046\060\047\056\050\051\051\uffb1\052\047" +
    "\055\uffb1\056\uffb1\001\002\000\046\025\uffb4\026\uffb4\030" +
    "\uffb4\032\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\047\056\050\051\051\uffb4\052" +
    "\uffb4\055\uffb4\056\uffb4\001\002\000\046\025\uffb7\026\uffb7" +
    "\030\uffb7\032\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\047\056\050\051\051\uffb7" +
    "\052\uffb7\055\uffb7\056\uffb7\001\002\000\046\025\uffb3\026" +
    "\uffb3\030\uffb3\032\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\055\uffb3\056\uffb3\001\002\000\046\025\uffba" +
    "\026\uffba\030\uffba\032\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\057\044\054\045\062\046\060\047\056\050\051" +
    "\051\uffba\052\uffba\055\uffba\056\uffba\001\002\000\046\025" +
    "\uffb6\026\uffb6\030\uffb6\032\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\056\050" +
    "\051\051\uffb6\052\uffb6\055\uffb6\056\uffb6\001\002\000\046" +
    "\025\uffb9\026\uffb9\030\uffb9\032\uffb9\037\052\040\055\041" +
    "\uffb9\042\uffb9\043\057\044\054\045\062\046\060\047\056" +
    "\050\051\051\uffb9\052\uffb9\055\uffb9\056\uffb9\001\002\000" +
    "\046\025\uffbb\026\uffbb\030\uffbb\032\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\057\044\054\045\062\046\060\047" +
    "\056\050\051\051\uffbb\052\uffbb\055\uffbb\056\uffbb\001\002" +
    "\000\046\025\uffb2\026\uffb2\030\uffb2\032\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\055\uffb2\056\uffb2\001" +
    "\002\000\046\025\uffb8\026\uffb8\030\uffb8\032\uffb8\037\052" +
    "\040\055\041\uffb8\042\uffb8\043\057\044\054\045\062\046" +
    "\060\047\056\050\051\051\uffb8\052\uffb8\055\uffb8\056\uffb8" +
    "\001\002\000\046\025\uffb0\026\uffb0\030\uffb0\032\uffb0\037" +
    "\052\040\055\041\053\042\050\043\057\044\054\045\062" +
    "\046\060\047\056\050\051\051\uffb0\052\uffb0\055\uffb0\056" +
    "\uffb0\001\002\000\032\020\035\021\040\027\041\030\104" +
    "\035\037\041\036\042\031\057\033\060\042\061\044\062" +
    "\046\063\034\001\002\000\030\020\035\021\040\027\041" +
    "\035\037\041\036\042\031\057\033\060\042\061\044\062" +
    "\046\063\034\001\002\000\034\032\102\037\052\040\055" +
    "\041\053\042\050\043\057\044\054\045\062\046\060\047" +
    "\056\050\051\051\061\052\047\001\002\000\054\025\uffd4" +
    "\026\uffd4\030\uffd4\032\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\001\002\000\004\030\110\001\002\000\046\025\uffca" +
    "\026\uffca\030\uffca\032\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca" +
    "\051\uffca\052\uffca\055\uffca\056\uffca\001\002\000\036\026" +
    "\106\030\uffd2\037\052\040\055\041\053\042\050\043\057" +
    "\044\054\045\062\046\060\047\056\050\051\051\061\052" +
    "\047\001\002\000\030\020\035\021\040\027\041\035\037" +
    "\041\036\042\031\057\033\060\042\061\044\062\046\063" +
    "\034\001\002\000\004\030\uffd3\001\002\000\046\025\uffc9" +
    "\026\uffc9\030\uffc9\032\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\055\uffc9\056\uffc9\001\002\000\036\030" +
    "\115\037\052\040\055\041\053\042\050\043\057\044\054" +
    "\045\062\046\060\047\056\050\051\051\061\052\047\055" +
    "\116\001\002\000\004\030\113\001\002\000\030\020\035" +
    "\021\040\027\041\035\037\041\036\042\031\057\033\060" +
    "\042\061\044\062\046\063\034\001\002\000\046\025\uffbe" +
    "\026\uffbe\030\uffbe\032\uffbe\037\052\040\055\041\053\042" +
    "\050\043\057\044\054\045\062\046\060\047\056\050\051" +
    "\051\061\052\047\055\uffbe\056\uffbe\001\002\000\046\025" +
    "\uffc2\026\uffc2\030\uffc2\032\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\055\uffc2\056\uffc2\001\002\000\030" +
    "\020\035\021\040\027\041\035\037\041\036\042\031\057" +
    "\033\060\042\061\044\062\046\063\034\001\002\000\034" +
    "\037\052\040\055\041\053\042\050\043\057\044\054\045" +
    "\062\046\060\047\056\050\051\051\061\052\047\056\120" +
    "\001\002\000\030\020\035\021\040\027\041\035\037\041" +
    "\036\042\031\057\033\060\042\061\044\062\046\063\034" +
    "\001\002\000\034\030\122\037\052\040\055\041\053\042" +
    "\050\043\057\044\054\045\062\046\060\047\056\050\051" +
    "\051\061\052\047\001\002\000\046\025\uffbc\026\uffbc\030" +
    "\uffbc\032\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\055\uffbc\056\uffbc\001\002\000\046\025\uffc1\026\uffc1" +
    "\030\uffc1\032\uffc1\037\052\040\055\041\053\042\050\043" +
    "\057\044\054\045\062\046\060\047\056\050\051\051\061" +
    "\052\047\055\uffc1\056\uffc1\001\002\000\046\025\uffbf\026" +
    "\uffbf\030\uffbf\032\uffbf\037\052\040\055\041\uffbf\042\uffbf" +
    "\043\057\044\054\045\062\046\060\047\056\050\051\051" +
    "\uffbf\052\uffbf\055\uffbf\056\uffbf\001\002\000\046\025\uffc0" +
    "\026\uffc0\030\uffc0\032\uffc0\037\052\040\055\041\uffc0\042" +
    "\uffc0\043\057\044\054\045\062\046\060\047\056\050\051" +
    "\051\uffc0\052\uffc0\055\uffc0\056\uffc0\001\002\000\012\025" +
    "\ufff5\027\127\031\130\036\026\001\002\000\014\007\010" +
    "\010\022\011\013\012\023\030\uffeb\001\002\000\004\057" +
    "\133\001\002\000\004\025\132\001\002\000\020\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\034\ufff8\001" +
    "\002\000\004\032\134\001\002\000\004\025\135\001\002" +
    "\000\020\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\034\ufff7\001\002\000\006\026\260\030\uffe9\001\002" +
    "\000\004\030\uffec\001\002\000\004\060\255\001\002\000" +
    "\004\030\142\001\002\000\004\033\143\001\002\000\014" +
    "\005\021\007\010\010\022\011\013\012\023\001\002\000" +
    "\014\005\021\007\010\010\022\011\013\012\023\001\002" +
    "\000\004\060\253\001\002\000\024\013\155\015\150\016" +
    "\161\022\147\023\157\024\160\033\153\034\uffe5\060\156" +
    "\001\002\000\004\027\247\001\002\000\004\027\243\001" +
    "\002\000\010\036\234\053\236\054\235\001\002\000\004" +
    "\034\232\001\002\000\014\005\021\007\010\010\022\011" +
    "\013\012\023\001\002\000\024\013\155\015\150\016\161" +
    "\022\147\023\157\024\160\033\153\034\uffe5\060\156\001" +
    "\002\000\004\027\213\001\002\000\014\027\205\031\100" +
    "\036\uffd5\053\uffd5\054\uffd5\001\002\000\004\027\201\001" +
    "\002\000\004\027\165\001\002\000\032\020\035\021\040" +
    "\025\162\027\041\035\037\041\036\042\031\057\033\060" +
    "\042\061\044\062\046\063\034\001\002\000\030\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\033\uffdc\034\uffdc\060\uffdc\001\002\000\034\025\164" +
    "\037\052\040\055\041\053\042\050\043\057\044\054\045" +
    "\062\046\060\047\056\050\051\051\061\052\047\001\002" +
    "\000\030\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\033\uffdb\034\uffdb\060\uffdb\001\002" +
    "\000\032\020\035\021\040\027\041\030\uffcc\035\037\041" +
    "\036\042\031\057\033\060\042\061\044\062\046\063\034" +
    "\001\002\000\004\030\uffcd\001\002\000\004\030\177\001" +
    "\002\000\036\026\171\030\uffce\037\052\040\055\041\053" +
    "\042\050\043\057\044\054\045\062\046\060\047\056\050" +
    "\051\051\061\052\047\001\002\000\004\060\172\001\002" +
    "\000\010\026\uffd5\030\uffd5\031\100\001\002\000\006\026" +
    "\175\030\uffd0\001\002\000\004\030\uffcf\001\002\000\030" +
    "\020\035\021\040\027\041\035\037\041\036\042\031\057" +
    "\033\060\042\061\044\062\046\063\034\001\002\000\004" +
    "\030\uffd1\001\002\000\004\025\200\001\002\000\030\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\033\uffdf\034\uffdf\060\uffdf\001\002\000\030\020" +
    "\035\021\040\027\041\035\037\041\036\042\031\057\033" +
    "\060\042\061\044\062\046\063\034\001\002\000\004\030" +
    "\203\001\002\000\004\025\204\001\002\000\030\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\033\uffe0\034\uffe0\060\uffe0\001\002\000\032\020\035" +
    "\021\040\027\041\030\207\035\037\041\036\042\031\057" +
    "\033\060\042\061\044\062\046\063\034\001\002\000\004" +
    "\030\211\001\002\000\004\025\210\001\002\000\030\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\022\uffde\023\uffde" +
    "\024\uffde\033\uffde\034\uffde\060\uffde\001\002\000\004\025" +
    "\212\001\002\000\030\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\022\uffdd\023\uffdd\024\uffdd\033\uffdd\034\uffdd\060" +
    "\uffdd\001\002\000\030\020\035\021\040\027\041\035\037" +
    "\041\036\042\031\057\033\060\042\061\044\062\046\063" +
    "\034\001\002\000\034\030\215\037\052\040\055\041\053" +
    "\042\050\043\057\044\054\045\062\046\060\047\056\050" +
    "\051\051\061\052\047\001\002\000\022\013\155\015\150" +
    "\016\161\022\147\023\157\024\160\033\153\060\156\001" +
    "\002\000\006\014\217\017\221\001\002\000\030\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\033\uffd6\034\uffd6\060\uffd6\001\002\000\030\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\033\uffe4\034\uffe4\060\uffe4\001\002\000\022\013\155" +
    "\015\150\016\161\022\147\023\157\024\160\033\153\060" +
    "\156\001\002\000\004\014\223\001\002\000\030\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\033\uffd7\034\uffd7\060\uffd7\001\002\000\004\034\uffe6" +
    "\001\002\000\024\013\155\015\150\016\161\022\147\023" +
    "\157\024\160\033\153\034\uffe5\060\156\001\002\000\004" +
    "\034\227\001\002\000\032\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\022\ufff1\023\ufff1\024\ufff1\025\231\033\ufff1" +
    "\034\ufff1\060\ufff1\001\002\000\030\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\022\uffd8\023\uffd8\024\uffd8\033\uffd8" +
    "\034\uffd8\060\uffd8\001\002\000\042\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\022\ufff2\023\ufff2\024\ufff2\033\ufff2\034\ufff2\060" +
    "\ufff2\001\002\000\020\006\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\025\231\034\ufff1\001\002\000\016\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\034\ufff4\001\002\000\030" +
    "\020\035\021\040\027\041\035\037\041\036\042\031\057" +
    "\033\060\042\061\044\062\046\063\034\001\002\000\004" +
    "\025\240\001\002\000\004\025\237\001\002\000\030\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\022\uffda\023\uffda" +
    "\024\uffda\033\uffda\034\uffda\060\uffda\001\002\000\030\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\033\uffd9\034\uffd9\060\uffd9\001\002\000\034\025" +
    "\242\037\052\040\055\041\053\042\050\043\057\044\054" +
    "\045\062\046\060\047\056\050\051\051\061\052\047\001" +
    "\002\000\030\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\033\uffe2\034\uffe2\060\uffe2\001" +
    "\002\000\030\020\035\021\040\027\041\035\037\041\036" +
    "\042\031\057\033\060\042\061\044\062\046\063\034\001" +
    "\002\000\034\030\245\037\052\040\055\041\053\042\050" +
    "\043\057\044\054\045\062\046\060\047\056\050\051\051" +
    "\061\052\047\001\002\000\022\013\155\015\150\016\161" +
    "\022\147\023\157\024\160\033\153\060\156\001\002\000" +
    "\030\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\033\uffe3\034\uffe3\060\uffe3\001\002\000" +
    "\004\060\172\001\002\000\004\030\251\001\002\000\004" +
    "\025\252\001\002\000\030\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\022\uffe1\023\uffe1\024\uffe1\033\uffe1\034\uffe1" +
    "\060\uffe1\001\002\000\010\025\ufff5\031\130\036\026\001" +
    "\002\000\036\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\015\ufffc\016\ufffc\022\ufffc\023\ufffc\024\ufffc\033" +
    "\ufffc\034\ufffc\060\ufffc\001\002\000\010\026\uffe8\030\uffe8" +
    "\031\256\001\002\000\004\032\257\001\002\000\006\026" +
    "\uffe7\030\uffe7\001\002\000\012\007\010\010\022\011\013" +
    "\012\023\001\002\000\004\030\uffea\001\002\000\004\034" +
    "\uffff\001\002\000\004\060\264\001\002\000\004\027\127" +
    "\001\002\000\004\027\266\001\002\000\014\007\010\010" +
    "\022\011\013\012\023\030\uffeb\001\002\000\004\030\270" +
    "\001\002\000\004\033\271\001\002\000\014\005\021\007" +
    "\010\010\022\011\013\012\023\001\002\000\024\013\155" +
    "\015\150\016\161\022\147\023\157\024\160\033\153\034" +
    "\uffe5\060\156\001\002\000\004\034\274\001\002\000\020" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\025\231\034" +
    "\ufff1\001\002\000\016\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\034\ufff3\001\002\000\004\034\ufffe\001\002\000" +
    "\004\002\001\001\002\000\004\034\ufffb\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\011\004\016" +
    "\005\014\006\013\010\010\012\017\001\001\000\002\001" +
    "\001\000\010\005\277\010\010\012\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\253\005\275\006" +
    "\143\010\010\012\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\261\010\010\012\262\001\001\000" +
    "\002\001\001\000\004\012\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\026\001" +
    "\001\000\010\021\031\026\044\027\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\031\026\124\027" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\031\026\123\027" +
    "\042\001\001\000\010\021\031\026\122\027\042\001\001" +
    "\000\002\001\001\000\012\012\111\021\031\026\110\027" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\031\026\075\027\042\001\001\000\010\021\031\026\074" +
    "\027\042\001\001\000\010\021\031\026\073\027\042\001" +
    "\001\000\010\021\031\026\072\027\042\001\001\000\010" +
    "\021\031\026\071\027\042\001\001\000\010\021\031\026" +
    "\070\027\042\001\001\000\010\021\031\026\067\027\042" +
    "\001\001\000\010\021\031\026\066\027\042\001\001\000" +
    "\010\021\031\026\065\027\042\001\001\000\010\021\031" +
    "\026\064\027\042\001\001\000\010\021\031\026\063\027" +
    "\042\001\001\000\010\021\031\026\062\027\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\031" +
    "\022\102\026\104\027\042\001\001\000\010\021\031\026" +
    "\100\027\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\031\022\106\026\104\027\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\021\031\026\113\027\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\031\026\116\027" +
    "\042\001\001\000\002\001\001\000\010\021\031\026\120" +
    "\027\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\130\001\001\000\012\012\137\013\140\014\136\015" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\145\006" +
    "\143\012\144\001\001\000\010\004\253\006\143\012\144" +
    "\001\001\000\002\001\001\000\010\016\151\017\153\021" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\224\006\143\012" +
    "\144\001\001\000\010\016\223\017\153\021\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\031\026\162\027\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\021\031\024\165\025\166\026\167\027\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\172\023\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\021\031\022\175\026" +
    "\104\027\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\031\024\201\026\167\027" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\031\022\205\026\104\027\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\031\026" +
    "\213\027\042\001\001\000\002\001\001\000\006\017\215" +
    "\021\150\001\001\000\004\020\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\221\021\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\225\017\153\021\150\001\001\000\002\001\001" +
    "\000\004\011\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\232\001\001\000\002\001\001\000\010" +
    "\021\031\026\240\027\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\031\026\243\027" +
    "\042\001\001\000\002\001\001\000\006\017\245\021\150" +
    "\001\001\000\002\001\001\000\006\021\172\023\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\137" +
    "\014\260\015\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\137\013\266\014\136\015\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\271\006\143" +
    "\012\144\001\001\000\010\016\272\017\153\021\150\001" +
    "\001\000\002\001\001\000\004\011\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= CLASS ID OPENCB memberdecls CLOSECB 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Memberdecls md = (Memberdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(i, md); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= fielddecls methoddecls 
            {
              Memberdecls RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecls fds = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls md = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Memberdecls(fds, md); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // memberdecls ::= fielddecl methoddecls 
            {
              Memberdecls RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl fd = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls md = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Memberdecls(fd, md); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // memberdecls ::= methoddecls 
            {
              Memberdecls RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls md = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Memberdecls(md); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fielddecls ::= fielddecl fielddecls 
            {
              Fielddecls RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl fd = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecls fds = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Fielddecls(fd, fds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methoddecls ::= methoddecl methoddecls 
            {
              Methoddecls RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Methoddecl md = (Methoddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls mds = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecls(md, mds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methoddecls ::= 
            {
              Methoddecls RESULT =null;
		 RESULT = new Methoddecls(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fielddecl ::= FINAL type ID optionalexpr SEMI 
            {
              Fielddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Optionalexpr oe = (Optionalexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Fielddecl(true, t, i, oe); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fielddecl ::= type ID optionalexpr SEMI 
            {
              Fielddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Optionalexpr oe = (Optionalexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Fielddecl(false, t, i, oe); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fielddecl ::= type ID OPENSB INTLIT CLOSESB SEMI 
            {
              Fielddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		int il = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Fielddecl(t, i, il); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // optionalexpr ::= ASSMNT expr 
            {
              Optionalexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Optionalexpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // optionalexpr ::= 
            {
              Optionalexpr RESULT =null;
		 RESULT = new Optionalexpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // methoddecl ::= type ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi 
            {
              Methoddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Argdecls a = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fds = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts s = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi os = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecl(t, i, a, fds, s, os); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // methoddecl ::= VOID ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi 
            {
              Methoddecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Argdecls a = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fds = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts s = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi os = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecl(true, i, a, fds, s, os); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // optionalsemi ::= SEMI 
            {
              Optionalsemi RESULT =null;
		 RESULT = new Optionalsemi(";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optionalsemi ::= 
            {
              Optionalsemi RESULT =null;
		 RESULT = new Optionalsemi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = new Type(2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type(3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new Type(4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // argdecls ::= argdeclList 
            {
              Argdecls RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgdeclList al = (ArgdeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Argdecls(al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // argdecls ::= 
            {
              Argdecls RESULT =null;
		 RESULT = new Argdecls(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // argdeclList ::= argdecl COMMA argdeclList 
            {
              ArgdeclList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argdecl a = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgdeclList al = (ArgdeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgdeclList(a, al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // argdeclList ::= argdecl 
            {
              ArgdeclList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argdecl a = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgdeclList(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // argdecl ::= type ID 
            {
              Argdecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Argdecl(false, t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // argdecl ::= type ID OPENSB CLOSESB 
            {
              Argdecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Argdecl(true, t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmts ::= stmt stmts 
            {
              Stmts RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmts ss = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmts(s, ss); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmts ::= 
            {
              Stmts RESULT =null;
		 RESULT = new Stmts(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= IF OPENP expr CLOSEP stmt ifEnd 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfEnd ie = (IfEnd)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(1, e, s, ie); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= WHILE OPENP expr CLOSEP stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(2, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= name ASSMNT expr SEMI 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Stmt(3, n, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= READ OPENP readlist CLOSEP SEMI 
            {
              Stmt RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Readlist rl = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(4, rl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= PRINT OPENP printlist CLOSEP SEMI 
            {
              Stmt RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlist pl = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(5, pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= PRINTL OPENP printlinelist CLOSEP SEMI 
            {
              Stmt RESULT =null;
		int pllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlinelist pll = (Printlinelist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(6, pll); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= ID OPENP CLOSEP SEMI 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Stmt(7, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= ID OPENP args CLOSEP SEMI 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(8, i, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= RETURN SEMI 
            {
              Stmt RESULT =null;
		 RESULT = new Stmt(9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= RETURN expr SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Stmt(10, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= name INCREMENT SEMI 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(11, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= name DECREMENT SEMI 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(12, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= OPENCB fielddecls stmts CLOSECB optionalsemi 
            {
              Stmt RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fds = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts s = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi os = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(13, fds, s, os); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ifEnd ::= ELSE stmt FI 
            {
              IfEnd RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfEnd(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifEnd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ifEnd ::= FI 
            {
              IfEnd RESULT =null;
		 RESULT = new IfEnd(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifEnd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // name ::= ID 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Name(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // name ::= ID OPENSB expr CLOSESB 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Name(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // args ::= expr COMMA args 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Args(e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // args ::= expr 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Args(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // readlist ::= name COMMA args 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Readlist(n, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // readlist ::= name 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Readlist(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // printlist ::= expr COMMA readlist 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Readlist rl = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Printlist(e, rl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // printlist ::= expr 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Printlist(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // printlinelist ::= printlist 
            {
              Printlinelist RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist pl = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Printlinelist(pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // printlinelist ::= 
            {
              Printlinelist RESULT =null;
		 RESULT = new Printlinelist(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= name 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(1, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= ID OPENP CLOSEP 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Expr(2, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= ID OPENP args CLOSEP 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(3, i, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= INTLIT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(4, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= CHARLIT 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(5, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= STRLIT 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(6, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= FLOATLIT 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double f = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(7, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new Expr(8, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new Expr(8, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= OPENP expr CLOSEP 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(9, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= TILDE expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(10, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(11, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= PLUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(12, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= OPENP type CLOSEP expr 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(13, t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= binaryop 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Binaryop b = (Binaryop)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(14, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= OPENP expr QUESTIONMARK expr COLON expr CLOSEP 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(15, e1, e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binaryop ::= expr MULT expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "*", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // binaryop ::= expr DIV expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "/", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // binaryop ::= expr PLUS expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "+", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binaryop ::= expr MINUS expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "-", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binaryop ::= expr LESSTHAN expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "<", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binaryop ::= expr GREATERTHAN expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, ">", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // binaryop ::= expr LEQ expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "<=", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binaryop ::= expr GEQ expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, ">=", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binaryop ::= expr EQUALTO expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "==", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binaryop ::= expr ANGLEB expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "<>", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binaryop ::= expr OR expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "||", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // binaryop ::= expr AND expr 
            {
              Binaryop RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(lhs, "&&", rhs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
