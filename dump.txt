===== Terminals =====
[0]EOF [1]error [2]CLASS [3]FINAL [4]VOID 
[5]INT [6]CHAR [7]BOOL [8]FLOAT [9]IF 
[10]FI [11]WHILE [12]RETURN [13]ELSE [14]TRUE 
[15]FALSE [16]READ [17]PRINT [18]PRINTL [19]SEMI 
[20]COMMA [21]OPENP [22]CLOSEP [23]OPENSB [24]CLOSESB 
[25]OPENCB [26]CLOSECB [27]TILDE [28]ASSMNT [29]MULT 
[30]DIV [31]PLUS [32]MINUS [33]LESSTHAN [34]GREATERTHAN 
[35]LEQ [36]GEQ [37]EQUALTO [38]ANGLEB [39]OR 
[40]AND [41]INCREMENT [42]DECREMENT [43]QUESTIONMARK [44]COLON 
[45]INTLIT [46]ID [47]CHARLIT [48]FLOATLIT [49]STRLIT 


===== Non terminals =====
[0]program [1]memberdecls [2]fielddecls [3]methoddecls [4]fielddecl 
[5]optionalexpr [6]methoddecl [7]optionalsemi [8]type [9]argdecls 
[10]argdeclList [11]argdecl [12]stmts [13]stmt [14]ifEnd 
[15]name [16]args [17]readlist [18]printlist [19]printlinelist 
[20]expr [21]binaryop 

===== Productions =====
[0] program ::= CLASS ID OPENCB memberdecls CLOSECB 
[1] $START ::= program EOF 
[2] memberdecls ::= fielddecls methoddecls 
[3] memberdecls ::= fielddecl methoddecls 
[4] memberdecls ::= methoddecls 
[5] fielddecls ::= fielddecl fielddecls 
[6] methoddecls ::= methoddecl methoddecls 
[7] methoddecls ::= 
[8] fielddecl ::= FINAL type ID optionalexpr SEMI 
[9] fielddecl ::= type ID optionalexpr SEMI 
[10] fielddecl ::= type ID OPENSB INTLIT CLOSESB SEMI 
[11] optionalexpr ::= ASSMNT expr 
[12] optionalexpr ::= 
[13] methoddecl ::= type ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi 
[14] methoddecl ::= VOID ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi 
[15] optionalsemi ::= SEMI 
[16] optionalsemi ::= 
[17] type ::= INT 
[18] type ::= CHAR 
[19] type ::= BOOL 
[20] type ::= FLOAT 
[21] argdecls ::= argdeclList 
[22] argdecls ::= 
[23] argdeclList ::= argdecl COMMA argdeclList 
[24] argdeclList ::= argdecl 
[25] argdecl ::= type ID 
[26] argdecl ::= type ID OPENSB CLOSESB 
[27] stmts ::= stmt stmts 
[28] stmts ::= 
[29] stmt ::= IF OPENP expr CLOSEP stmt ifEnd 
[30] stmt ::= WHILE OPENP expr CLOSEP stmt 
[31] stmt ::= name ASSMNT expr SEMI 
[32] stmt ::= READ OPENP readlist CLOSEP SEMI 
[33] stmt ::= PRINT OPENP printlist CLOSEP SEMI 
[34] stmt ::= PRINTL OPENP printlinelist CLOSEP SEMI 
[35] stmt ::= ID OPENP CLOSEP SEMI 
[36] stmt ::= ID OPENP args CLOSEP SEMI 
[37] stmt ::= RETURN SEMI 
[38] stmt ::= RETURN expr SEMI 
[39] stmt ::= name INCREMENT SEMI 
[40] stmt ::= name DECREMENT SEMI 
[41] stmt ::= OPENCB fielddecls stmts CLOSECB optionalsemi 
[42] ifEnd ::= ELSE stmt FI 
[43] ifEnd ::= FI 
[44] name ::= ID 
[45] name ::= ID OPENSB expr CLOSESB 
[46] args ::= expr COMMA args 
[47] args ::= expr 
[48] readlist ::= name COMMA args 
[49] readlist ::= name 
[50] printlist ::= expr COMMA readlist 
[51] printlist ::= expr 
[52] printlinelist ::= printlist 
[53] printlinelist ::= 
[54] expr ::= name 
[55] expr ::= ID OPENP CLOSEP 
[56] expr ::= ID OPENP args CLOSEP 
[57] expr ::= INTLIT 
[58] expr ::= CHARLIT 
[59] expr ::= STRLIT 
[60] expr ::= FLOATLIT 
[61] expr ::= TRUE 
[62] expr ::= FALSE 
[63] expr ::= OPENP expr CLOSEP 
[64] expr ::= TILDE expr 
[65] expr ::= MINUS expr 
[66] expr ::= PLUS expr 
[67] expr ::= OPENP type CLOSEP expr 
[68] expr ::= binaryop 
[69] expr ::= OPENP expr QUESTIONMARK expr COLON expr CLOSEP 
[70] binaryop ::= expr MULT expr 
[71] binaryop ::= expr DIV expr 
[72] binaryop ::= expr PLUS expr 
[73] binaryop ::= expr MINUS expr 
[74] binaryop ::= expr LESSTHAN expr 
[75] binaryop ::= expr GREATERTHAN expr 
[76] binaryop ::= expr LEQ expr 
[77] binaryop ::= expr GEQ expr 
[78] binaryop ::= expr EQUALTO expr 
[79] binaryop ::= expr ANGLEB expr 
[80] binaryop ::= expr OR expr 
[81] binaryop ::= expr AND expr 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [$START ::= (*) program EOF , {EOF }]
  [program ::= (*) CLASS ID OPENCB memberdecls CLOSECB , {EOF }]
}
transition on CLASS to state [2]
transition on program to state [1]

-------------------
lalr_state [1]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [190]

-------------------
lalr_state [2]: {
  [program ::= CLASS (*) ID OPENCB memberdecls CLOSECB , {EOF }]
}
transition on ID to state [3]

-------------------
lalr_state [3]: {
  [program ::= CLASS ID (*) OPENCB memberdecls CLOSECB , {EOF }]
}
transition on OPENCB to state [4]

-------------------
lalr_state [4]: {
  [type ::= (*) FLOAT , {ID }]
  [type ::= (*) INT , {ID }]
  [methoddecl ::= (*) VOID ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [fielddecl ::= (*) FINAL type ID optionalexpr SEMI , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
  [fielddecls ::= (*) fielddecl fielddecls , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [memberdecls ::= (*) fielddecls methoddecls , {CLOSECB }]
  [type ::= (*) BOOL , {ID }]
  [methoddecl ::= (*) type ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [fielddecl ::= (*) type ID OPENSB INTLIT CLOSESB SEMI , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
  [methoddecls ::= (*) , {CLOSECB }]
  [memberdecls ::= (*) methoddecls , {CLOSECB }]
  [type ::= (*) CHAR , {ID }]
  [program ::= CLASS ID OPENCB (*) memberdecls CLOSECB , {EOF }]
  [fielddecl ::= (*) type ID optionalexpr SEMI , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
  [methoddecls ::= (*) methoddecl methoddecls , {CLOSECB }]
  [memberdecls ::= (*) fielddecl methoddecls , {CLOSECB }]
}
transition on FLOAT to state [16]
transition on CHAR to state [15]
transition on FINAL to state [14]
transition on type to state [13]
transition on fielddecls to state [12]
transition on VOID to state [11]
transition on methoddecls to state [10]
transition on fielddecl to state [9]
transition on BOOL to state [8]
transition on memberdecls to state [7]
transition on methoddecl to state [6]
transition on INT to state [5]

-------------------
lalr_state [5]: {
  [type ::= INT (*) , {CLOSEP ID }]
}

-------------------
lalr_state [6]: {
  [type ::= (*) FLOAT , {ID }]
  [type ::= (*) INT , {ID }]
  [methoddecl ::= (*) VOID ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [type ::= (*) BOOL , {ID }]
  [methoddecl ::= (*) type ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [methoddecls ::= (*) , {CLOSECB }]
  [type ::= (*) CHAR , {ID }]
  [methoddecls ::= methoddecl (*) methoddecls , {CLOSECB }]
  [methoddecls ::= (*) methoddecl methoddecls , {CLOSECB }]
}
transition on INT to state [5]
transition on FLOAT to state [16]
transition on VOID to state [11]
transition on CHAR to state [15]
transition on BOOL to state [8]
transition on type to state [176]
transition on methoddecls to state [189]
transition on methoddecl to state [6]

-------------------
lalr_state [7]: {
  [program ::= CLASS ID OPENCB memberdecls (*) CLOSECB , {EOF }]
}
transition on CLOSECB to state [188]

-------------------
lalr_state [8]: {
  [type ::= BOOL (*) , {CLOSEP ID }]
}

-------------------
lalr_state [9]: {
  [type ::= (*) FLOAT , {ID }]
  [type ::= (*) INT , {ID }]
  [methoddecl ::= (*) VOID ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [fielddecls ::= fielddecl (*) fielddecls , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [fielddecl ::= (*) FINAL type ID optionalexpr SEMI , {FINAL INT CHAR BOOL FLOAT }]
  [fielddecls ::= (*) fielddecl fielddecls , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [type ::= (*) BOOL , {ID }]
  [methoddecl ::= (*) type ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [fielddecl ::= (*) type ID OPENSB INTLIT CLOSESB SEMI , {FINAL INT CHAR BOOL FLOAT }]
  [methoddecls ::= (*) , {CLOSECB }]
  [type ::= (*) CHAR , {ID }]
  [fielddecl ::= (*) type ID optionalexpr SEMI , {FINAL INT CHAR BOOL FLOAT }]
  [methoddecls ::= (*) methoddecl methoddecls , {CLOSECB }]
  [memberdecls ::= fielddecl (*) methoddecls , {CLOSECB }]
}
transition on FLOAT to state [16]
transition on CHAR to state [15]
transition on FINAL to state [14]
transition on type to state [13]
transition on fielddecls to state [169]
transition on VOID to state [11]
transition on methoddecls to state [187]
transition on fielddecl to state [97]
transition on BOOL to state [8]
transition on methoddecl to state [6]
transition on INT to state [5]

-------------------
lalr_state [10]: {
  [memberdecls ::= methoddecls (*) , {CLOSECB }]
}

-------------------
lalr_state [11]: {
  [methoddecl ::= VOID (*) ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on ID to state [178]

-------------------
lalr_state [12]: {
  [type ::= (*) FLOAT , {ID }]
  [type ::= (*) INT , {ID }]
  [methoddecl ::= (*) VOID ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [memberdecls ::= fielddecls (*) methoddecls , {CLOSECB }]
  [type ::= (*) BOOL , {ID }]
  [methoddecl ::= (*) type ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [methoddecls ::= (*) , {CLOSECB }]
  [type ::= (*) CHAR , {ID }]
  [methoddecls ::= (*) methoddecl methoddecls , {CLOSECB }]
}
transition on INT to state [5]
transition on FLOAT to state [16]
transition on VOID to state [11]
transition on CHAR to state [15]
transition on BOOL to state [8]
transition on type to state [176]
transition on methoddecls to state [175]
transition on methoddecl to state [6]

-------------------
lalr_state [13]: {
  [methoddecl ::= type (*) ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [fielddecl ::= type (*) ID OPENSB INTLIT CLOSESB SEMI , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
  [fielddecl ::= type (*) ID optionalexpr SEMI , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on ID to state [83]

-------------------
lalr_state [14]: {
  [type ::= (*) BOOL , {ID }]
  [type ::= (*) CHAR , {ID }]
  [type ::= (*) FLOAT , {ID }]
  [type ::= (*) INT , {ID }]
  [fielddecl ::= FINAL (*) type ID optionalexpr SEMI , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on INT to state [5]
transition on CHAR to state [15]
transition on FLOAT to state [16]
transition on BOOL to state [8]
transition on type to state [17]

-------------------
lalr_state [15]: {
  [type ::= CHAR (*) , {CLOSEP ID }]
}

-------------------
lalr_state [16]: {
  [type ::= FLOAT (*) , {CLOSEP ID }]
}

-------------------
lalr_state [17]: {
  [fielddecl ::= FINAL type (*) ID optionalexpr SEMI , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on ID to state [18]

-------------------
lalr_state [18]: {
  [optionalexpr ::= (*) , {SEMI }]
  [fielddecl ::= FINAL type ID (*) optionalexpr SEMI , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
  [optionalexpr ::= (*) ASSMNT expr , {SEMI }]
}
transition on optionalexpr to state [20]
transition on ASSMNT to state [19]

-------------------
lalr_state [19]: {
  [expr ::= (*) INTLIT , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FALSE , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr PLUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GEQ expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FLOATLIT , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) MINUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MULT expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr OR expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [optionalexpr ::= ASSMNT (*) expr , {SEMI }]
  [expr ::= (*) CHARLIT , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) binaryop , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MINUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TRUE , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) PLUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr DIV expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LEQ expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr AND expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) name , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) STRLIT , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TILDE expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on FLOATLIT to state [35]
transition on expr to state [34]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [20]: {
  [fielddecl ::= FINAL type ID optionalexpr (*) SEMI , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on SEMI to state [21]

-------------------
lalr_state [21]: {
  [fielddecl ::= FINAL type ID optionalexpr SEMI (*) , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
}

-------------------
lalr_state [22]: {
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= MINUS (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [82]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [23]: {
  [expr ::= name (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}

-------------------
lalr_state [24]: {
  [expr ::= INTLIT (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}

-------------------
lalr_state [25]: {
  [expr ::= STRLIT (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}

-------------------
lalr_state [26]: {
  [expr ::= TRUE (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}

-------------------
lalr_state [27]: {
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= PLUS (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [81]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [28]: {
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= TILDE (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [80]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [29]: {
  [expr ::= FALSE (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}

-------------------
lalr_state [30]: {
  [binaryop ::= (*) expr GEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= (*) binaryop , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= (*) STRLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= (*) expr MINUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= (*) TILDE expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= (*) ID OPENP CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [type ::= (*) BOOL , {CLOSEP }]
  [binaryop ::= (*) expr EQUALTO expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= OPENP (*) expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= (*) FLOATLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= (*) expr LESSTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= (*) MINUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= (*) ID OPENP args CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [type ::= (*) FLOAT , {CLOSEP }]
  [binaryop ::= (*) expr ANGLEB expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= (*) expr MULT expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= (*) TRUE , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= (*) expr GREATERTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= (*) PLUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= (*) INTLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= (*) expr OR expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= (*) expr DIV expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= (*) FALSE , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [name ::= (*) ID , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [type ::= (*) INT , {CLOSEP }]
  [binaryop ::= (*) expr LEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= OPENP (*) type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= (*) CHARLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= (*) expr AND expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= OPENP (*) expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= (*) OPENP expr CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= (*) name , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [name ::= (*) ID OPENSB expr CLOSESB , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [type ::= (*) CHAR , {CLOSEP }]
}
transition on name to state [23]
transition on BOOL to state [8]
transition on MINUS to state [22]
transition on FALSE to state [29]
transition on OPENP to state [30]
transition on FLOAT to state [16]
transition on INTLIT to state [24]
transition on TILDE to state [28]
transition on ID to state [31]
transition on TRUE to state [26]
transition on binaryop to state [32]
transition on FLOATLIT to state [35]
transition on CHARLIT to state [33]
transition on STRLIT to state [25]
transition on type to state [71]
transition on CHAR to state [15]
transition on INT to state [5]
transition on PLUS to state [27]
transition on expr to state [70]

-------------------
lalr_state [31]: {
  [expr ::= ID (*) OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= ID (*) OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= ID (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= ID (*) OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on OPENSB to state [61]
transition on OPENP to state [60]

-------------------
lalr_state [32]: {
  [expr ::= binaryop (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}

-------------------
lalr_state [33]: {
  [expr ::= CHARLIT (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}

-------------------
lalr_state [34]: {
  [optionalexpr ::= ASSMNT expr (*) , {SEMI }]
  [binaryop ::= expr (*) OR expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GEQ expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) DIV expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LEQ expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MINUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MULT expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) AND expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) PLUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [35]: {
  [expr ::= FLOATLIT (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}

-------------------
lalr_state [36]: {
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr AND (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [59]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [37]: {
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr MINUS (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [58]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [38]: {
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr ANGLEB (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [57]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [39]: {
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr MULT (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [56]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [40]: {
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr PLUS (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [55]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [41]: {
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr GREATERTHAN (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [54]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [42]: {
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr DIV (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [53]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [43]: {
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr EQUALTO (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [52]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [44]: {
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr LESSTHAN (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [51]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [45]: {
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr GEQ (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [50]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [46]: {
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr OR (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [49]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [47]: {
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr LEQ (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [48]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [48]: {
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr LEQ expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [49]: {
  [binaryop ::= expr OR expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [50]: {
  [binaryop ::= expr GEQ expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [51]: {
  [binaryop ::= expr LESSTHAN expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [52]: {
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr EQUALTO expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [53]: {
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr DIV expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [54]: {
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr GREATERTHAN expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [55]: {
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr PLUS expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [56]: {
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr MULT expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [57]: {
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr ANGLEB expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [58]: {
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr MINUS expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [59]: {
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr AND expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [60]: {
  [expr ::= (*) INTLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FALSE , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP type CLOSEP expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr PLUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID OPENSB expr CLOSESB , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= ID OPENP (*) CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FLOATLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) MINUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MULT expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GREATERTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr OR expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) CHARLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) binaryop , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MINUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr EQUALTO expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [args ::= (*) expr COMMA args , {CLOSEP }]
  [expr ::= ID OPENP (*) args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TRUE , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) PLUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr DIV expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr AND expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) name , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) STRLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TILDE expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LESSTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr ANGLEB expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [args ::= (*) expr , {CLOSEP }]
}
transition on FLOATLIT to state [35]
transition on expr to state [66]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on CLOSEP to state [65]
transition on ID to state [31]
transition on OPENP to state [30]
transition on args to state [64]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [61]: {
  [expr ::= (*) INTLIT , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FALSE , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP type CLOSEP expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr PLUS expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GEQ expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= ID OPENSB (*) expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB ASSMNT MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND INCREMENT DECREMENT QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP CLOSEP , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FLOATLIT , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) MINUS expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MULT expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GREATERTHAN expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr OR expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) CHARLIT , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr CLOSEP , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) binaryop , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MINUS expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr EQUALTO expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP args CLOSEP , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TRUE , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) PLUS expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr DIV expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LEQ expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr AND expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) name , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) STRLIT , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TILDE expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LESSTHAN expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr ANGLEB expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on FLOATLIT to state [35]
transition on expr to state [62]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [62]: {
  [binaryop ::= expr (*) OR expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GEQ expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LESSTHAN expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= ID OPENSB expr (*) CLOSESB , {SEMI COMMA CLOSEP CLOSESB ASSMNT MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND INCREMENT DECREMENT QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) ANGLEB expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LEQ expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MINUS expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MULT expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) AND expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) EQUALTO expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GREATERTHAN expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) PLUS expr , {CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on CLOSESB to state [63]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [63]: {
  [name ::= ID OPENSB expr CLOSESB (*) , {SEMI COMMA CLOSEP CLOSESB ASSMNT MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND INCREMENT DECREMENT QUESTIONMARK COLON }]
}

-------------------
lalr_state [64]: {
  [expr ::= ID OPENP args (*) CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on CLOSEP to state [69]

-------------------
lalr_state [65]: {
  [expr ::= ID OPENP CLOSEP (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}

-------------------
lalr_state [66]: {
  [binaryop ::= expr (*) OR expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LESSTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) DIV expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) ANGLEB expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MINUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [args ::= expr (*) , {CLOSEP }]
  [binaryop ::= expr (*) MULT expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) AND expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) EQUALTO expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GREATERTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) PLUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [args ::= expr (*) COMMA args , {CLOSEP }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on COMMA to state [67]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [67]: {
  [expr ::= (*) INTLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FALSE , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP type CLOSEP expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr PLUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID OPENSB expr CLOSESB , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FLOATLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) MINUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MULT expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GREATERTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr OR expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) CHARLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) binaryop , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MINUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr EQUALTO expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [args ::= expr COMMA (*) args , {CLOSEP }]
  [args ::= (*) expr COMMA args , {CLOSEP }]
  [expr ::= (*) ID OPENP args CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TRUE , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) PLUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr DIV expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr AND expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) name , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) STRLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TILDE expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LESSTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr ANGLEB expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [args ::= (*) expr , {CLOSEP }]
}
transition on FLOATLIT to state [35]
transition on expr to state [66]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on args to state [68]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [68]: {
  [args ::= expr COMMA args (*) , {CLOSEP }]
}

-------------------
lalr_state [69]: {
  [expr ::= ID OPENP args CLOSEP (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}

-------------------
lalr_state [70]: {
  [binaryop ::= expr (*) OR expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= expr (*) GEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= expr (*) LESSTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= expr (*) DIV expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= expr (*) ANGLEB expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= expr (*) LEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= expr (*) MINUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= expr (*) MULT expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= expr (*) AND expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= expr (*) EQUALTO expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= expr (*) GREATERTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [binaryop ::= expr (*) PLUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK }]
  [expr ::= OPENP expr (*) QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= OPENP expr (*) CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on QUESTIONMARK to state [75]
transition on EQUALTO to state [43]
transition on CLOSEP to state [74]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [71]: {
  [expr ::= OPENP type (*) CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on CLOSEP to state [72]

-------------------
lalr_state [72]: {
  [expr ::= OPENP type CLOSEP (*) expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) INTLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FALSE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) FLOATLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) CHARLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) binaryop , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TRUE , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [name ::= (*) ID , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) STRLIT , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) TILDE expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [73]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [73]: {
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= OPENP type CLOSEP expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [74]: {
  [expr ::= OPENP expr CLOSEP (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}

-------------------
lalr_state [75]: {
  [expr ::= (*) INTLIT , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= (*) FALSE , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= (*) OPENP type CLOSEP expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= (*) expr PLUS expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= (*) expr GEQ expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [name ::= (*) ID OPENSB expr CLOSESB , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= (*) ID OPENP CLOSEP , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= (*) FLOATLIT , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= (*) MINUS expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= (*) expr MULT expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= (*) expr GREATERTHAN expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= (*) expr OR expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= (*) CHARLIT , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= (*) OPENP expr CLOSEP , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= (*) binaryop , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= (*) expr MINUS expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= (*) expr EQUALTO expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= (*) ID OPENP args CLOSEP , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= (*) TRUE , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= (*) PLUS expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= (*) expr DIV expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= (*) expr LEQ expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= (*) expr AND expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [name ::= (*) ID , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= OPENP expr QUESTIONMARK (*) expr COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= (*) STRLIT , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= (*) TILDE expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= (*) expr LESSTHAN expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= (*) expr ANGLEB expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
}
transition on FLOATLIT to state [35]
transition on expr to state [76]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [76]: {
  [binaryop ::= expr (*) OR expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= expr (*) GEQ expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= expr (*) DIV expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= expr (*) LEQ expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= expr (*) MINUS expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= expr (*) MULT expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= expr (*) AND expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [expr ::= OPENP expr QUESTIONMARK expr (*) COLON expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
  [binaryop ::= expr (*) PLUS expr , {MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on COLON to state [77]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [77]: {
  [expr ::= (*) INTLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FALSE , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP type CLOSEP expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr PLUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID OPENSB expr CLOSESB , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FLOATLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) MINUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MULT expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GREATERTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr OR expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) CHARLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) binaryop , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MINUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr EQUALTO expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP args CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TRUE , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) PLUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr DIV expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr AND expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= OPENP expr QUESTIONMARK expr COLON (*) expr CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= (*) name , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) STRLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TILDE expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LESSTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr ANGLEB expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on FLOATLIT to state [35]
transition on expr to state [78]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [78]: {
  [binaryop ::= expr (*) OR expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LESSTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) DIV expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) ANGLEB expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MINUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MULT expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= OPENP expr QUESTIONMARK expr COLON expr (*) CLOSEP , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) EQUALTO expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GREATERTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) PLUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on CLOSEP to state [79]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [79]: {
  [expr ::= OPENP expr QUESTIONMARK expr COLON expr CLOSEP (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}

-------------------
lalr_state [80]: {
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= TILDE expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [81]: {
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= PLUS expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [82]: {
  [binaryop ::= expr (*) OR expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) DIV expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [expr ::= MINUS expr (*) , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) LEQ expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MINUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) MULT expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) AND expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
  [binaryop ::= expr (*) PLUS expr , {SEMI COMMA CLOSEP CLOSESB MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND QUESTIONMARK COLON }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [83]: {
  [methoddecl ::= type ID (*) OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [fielddecl ::= type ID (*) OPENSB INTLIT CLOSESB SEMI , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
  [fielddecl ::= type ID (*) optionalexpr SEMI , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
  [optionalexpr ::= (*) , {SEMI }]
  [optionalexpr ::= (*) ASSMNT expr , {SEMI }]
}
transition on optionalexpr to state [86]
transition on OPENSB to state [85]
transition on ASSMNT to state [19]
transition on OPENP to state [84]

-------------------
lalr_state [84]: {
  [type ::= (*) FLOAT , {ID }]
  [type ::= (*) INT , {ID }]
  [argdecl ::= (*) type ID , {COMMA CLOSEP }]
  [methoddecl ::= type ID OPENP (*) argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [argdecls ::= (*) , {CLOSEP }]
  [type ::= (*) BOOL , {ID }]
  [argdeclList ::= (*) argdecl , {CLOSEP }]
  [argdecls ::= (*) argdeclList , {CLOSEP }]
  [type ::= (*) CHAR , {ID }]
  [argdecl ::= (*) type ID OPENSB CLOSESB , {COMMA CLOSEP }]
  [argdeclList ::= (*) argdecl COMMA argdeclList , {CLOSEP }]
}
transition on INT to state [5]
transition on argdecls to state [94]
transition on FLOAT to state [16]
transition on CHAR to state [15]
transition on BOOL to state [8]
transition on type to state [93]
transition on argdeclList to state [92]
transition on argdecl to state [91]

-------------------
lalr_state [85]: {
  [fielddecl ::= type ID OPENSB (*) INTLIT CLOSESB SEMI , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on INTLIT to state [88]

-------------------
lalr_state [86]: {
  [fielddecl ::= type ID optionalexpr (*) SEMI , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on SEMI to state [87]

-------------------
lalr_state [87]: {
  [fielddecl ::= type ID optionalexpr SEMI (*) , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
}

-------------------
lalr_state [88]: {
  [fielddecl ::= type ID OPENSB INTLIT (*) CLOSESB SEMI , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on CLOSESB to state [89]

-------------------
lalr_state [89]: {
  [fielddecl ::= type ID OPENSB INTLIT CLOSESB (*) SEMI , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on SEMI to state [90]

-------------------
lalr_state [90]: {
  [fielddecl ::= type ID OPENSB INTLIT CLOSESB SEMI (*) , {FINAL VOID INT CHAR BOOL FLOAT CLOSECB }]
}

-------------------
lalr_state [91]: {
  [argdeclList ::= argdecl (*) , {CLOSEP }]
  [argdeclList ::= argdecl (*) COMMA argdeclList , {CLOSEP }]
}
transition on COMMA to state [173]

-------------------
lalr_state [92]: {
  [argdecls ::= argdeclList (*) , {CLOSEP }]
}

-------------------
lalr_state [93]: {
  [argdecl ::= type (*) ID OPENSB CLOSESB , {COMMA CLOSEP }]
  [argdecl ::= type (*) ID , {COMMA CLOSEP }]
}
transition on ID to state [170]

-------------------
lalr_state [94]: {
  [methoddecl ::= type ID OPENP argdecls (*) CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on CLOSEP to state [95]

-------------------
lalr_state [95]: {
  [methoddecl ::= type ID OPENP argdecls CLOSEP (*) OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on OPENCB to state [96]

-------------------
lalr_state [96]: {
  [type ::= (*) FLOAT , {ID }]
  [type ::= (*) INT , {ID }]
  [methoddecl ::= type ID OPENP argdecls CLOSEP OPENCB (*) fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [fielddecl ::= (*) FINAL type ID optionalexpr SEMI , {FINAL INT CHAR BOOL FLOAT }]
  [fielddecls ::= (*) fielddecl fielddecls , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [type ::= (*) BOOL , {ID }]
  [fielddecl ::= (*) type ID OPENSB INTLIT CLOSESB SEMI , {FINAL INT CHAR BOOL FLOAT }]
  [type ::= (*) CHAR , {ID }]
  [fielddecl ::= (*) type ID optionalexpr SEMI , {FINAL INT CHAR BOOL FLOAT }]
}
transition on INT to state [5]
transition on FLOAT to state [16]
transition on CHAR to state [15]
transition on FINAL to state [14]
transition on BOOL to state [8]
transition on fielddecls to state [99]
transition on type to state [98]
transition on fielddecl to state [97]

-------------------
lalr_state [97]: {
  [type ::= (*) FLOAT , {ID }]
  [type ::= (*) INT , {ID }]
  [fielddecls ::= fielddecl (*) fielddecls , {VOID INT CHAR BOOL FLOAT IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [fielddecl ::= (*) FINAL type ID optionalexpr SEMI , {FINAL INT CHAR BOOL FLOAT }]
  [fielddecls ::= (*) fielddecl fielddecls , {VOID INT CHAR BOOL FLOAT IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [type ::= (*) BOOL , {ID }]
  [fielddecl ::= (*) type ID OPENSB INTLIT CLOSESB SEMI , {FINAL INT CHAR BOOL FLOAT }]
  [type ::= (*) CHAR , {ID }]
  [fielddecl ::= (*) type ID optionalexpr SEMI , {FINAL INT CHAR BOOL FLOAT }]
}
transition on INT to state [5]
transition on FLOAT to state [16]
transition on CHAR to state [15]
transition on FINAL to state [14]
transition on BOOL to state [8]
transition on fielddecls to state [169]
transition on type to state [98]
transition on fielddecl to state [97]

-------------------
lalr_state [98]: {
  [fielddecl ::= type (*) ID OPENSB INTLIT CLOSESB SEMI , {FINAL INT CHAR BOOL FLOAT }]
  [fielddecl ::= type (*) ID optionalexpr SEMI , {FINAL INT CHAR BOOL FLOAT }]
}
transition on ID to state [168]

-------------------
lalr_state [99]: {
  [methoddecl ::= type ID OPENP argdecls CLOSEP OPENCB fielddecls (*) stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [stmt ::= (*) WHILE OPENP expr CLOSEP stmt , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) ID OPENP CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) name DECREMENT SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [name ::= (*) ID OPENSB expr CLOSESB , {ASSMNT INCREMENT DECREMENT }]
  [stmts ::= (*) , {CLOSECB }]
  [stmt ::= (*) PRINT OPENP printlist CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) RETURN expr SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) name ASSMNT expr SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) ID OPENP args CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) OPENCB fielddecls stmts CLOSECB optionalsemi , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) IF OPENP expr CLOSEP stmt ifEnd , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) PRINTL OPENP printlinelist CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) name INCREMENT SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [name ::= (*) ID , {ASSMNT INCREMENT DECREMENT }]
  [stmts ::= (*) stmt stmts , {CLOSECB }]
  [stmt ::= (*) READ OPENP readlist CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) RETURN SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on RETURN to state [110]
transition on PRINTL to state [109]
transition on PRINT to state [108]
transition on ID to state [107]
transition on IF to state [106]
transition on stmt to state [105]
transition on OPENCB to state [104]
transition on stmts to state [103]
transition on name to state [102]
transition on WHILE to state [101]
transition on READ to state [100]

-------------------
lalr_state [100]: {
  [stmt ::= READ (*) OPENP readlist CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on OPENP to state [164]

-------------------
lalr_state [101]: {
  [stmt ::= WHILE (*) OPENP expr CLOSEP stmt , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on OPENP to state [160]

-------------------
lalr_state [102]: {
  [stmt ::= name (*) DECREMENT SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= name (*) ASSMNT expr SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= name (*) INCREMENT SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on INCREMENT to state [155]
transition on DECREMENT to state [154]
transition on ASSMNT to state [153]

-------------------
lalr_state [103]: {
  [methoddecl ::= type ID OPENP argdecls CLOSEP OPENCB fielddecls stmts (*) CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on CLOSECB to state [151]

-------------------
lalr_state [104]: {
  [type ::= (*) FLOAT , {ID }]
  [type ::= (*) INT , {ID }]
  [fielddecl ::= (*) FINAL type ID optionalexpr SEMI , {FINAL INT CHAR BOOL FLOAT }]
  [fielddecls ::= (*) fielddecl fielddecls , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [type ::= (*) BOOL , {ID }]
  [fielddecl ::= (*) type ID OPENSB INTLIT CLOSESB SEMI , {FINAL INT CHAR BOOL FLOAT }]
  [stmt ::= OPENCB (*) fielddecls stmts CLOSECB optionalsemi , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [type ::= (*) CHAR , {ID }]
  [fielddecl ::= (*) type ID optionalexpr SEMI , {FINAL INT CHAR BOOL FLOAT }]
}
transition on INT to state [5]
transition on FLOAT to state [16]
transition on CHAR to state [15]
transition on FINAL to state [14]
transition on BOOL to state [8]
transition on fielddecls to state [146]
transition on type to state [98]
transition on fielddecl to state [97]

-------------------
lalr_state [105]: {
  [stmt ::= (*) WHILE OPENP expr CLOSEP stmt , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) ID OPENP CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) name DECREMENT SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [name ::= (*) ID OPENSB expr CLOSESB , {ASSMNT INCREMENT DECREMENT }]
  [stmts ::= (*) , {CLOSECB }]
  [stmt ::= (*) PRINT OPENP printlist CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) RETURN expr SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) name ASSMNT expr SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) ID OPENP args CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) OPENCB fielddecls stmts CLOSECB optionalsemi , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) IF OPENP expr CLOSEP stmt ifEnd , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) PRINTL OPENP printlinelist CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) name INCREMENT SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [name ::= (*) ID , {ASSMNT INCREMENT DECREMENT }]
  [stmts ::= stmt (*) stmts , {CLOSECB }]
  [stmts ::= (*) stmt stmts , {CLOSECB }]
  [stmt ::= (*) READ OPENP readlist CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) RETURN SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on RETURN to state [110]
transition on PRINTL to state [109]
transition on PRINT to state [108]
transition on ID to state [107]
transition on IF to state [106]
transition on stmt to state [105]
transition on OPENCB to state [104]
transition on name to state [102]
transition on WHILE to state [101]
transition on stmts to state [145]
transition on READ to state [100]

-------------------
lalr_state [106]: {
  [stmt ::= IF (*) OPENP expr CLOSEP stmt ifEnd , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on OPENP to state [136]

-------------------
lalr_state [107]: {
  [stmt ::= ID (*) OPENP CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [name ::= ID (*) OPENSB expr CLOSESB , {ASSMNT INCREMENT DECREMENT }]
  [stmt ::= ID (*) OPENP args CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [name ::= ID (*) , {ASSMNT INCREMENT DECREMENT }]
}
transition on OPENSB to state [61]
transition on OPENP to state [130]

-------------------
lalr_state [108]: {
  [stmt ::= PRINT (*) OPENP printlist CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on OPENP to state [126]

-------------------
lalr_state [109]: {
  [stmt ::= PRINTL (*) OPENP printlinelist CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on OPENP to state [114]

-------------------
lalr_state [110]: {
  [expr ::= (*) INTLIT , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FALSE , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr PLUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GEQ expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FLOATLIT , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) MINUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MULT expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr OR expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [stmt ::= RETURN (*) expr SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [expr ::= (*) CHARLIT , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) binaryop , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MINUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TRUE , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) PLUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr DIV expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LEQ expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr AND expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) name , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) STRLIT , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TILDE expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [stmt ::= RETURN (*) SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on FLOATLIT to state [35]
transition on expr to state [112]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on SEMI to state [111]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [111]: {
  [stmt ::= RETURN SEMI (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [112]: {
  [binaryop ::= expr (*) OR expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GEQ expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) DIV expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LEQ expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MINUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MULT expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [stmt ::= RETURN expr (*) SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [binaryop ::= expr (*) AND expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) PLUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on SEMI to state [113]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [113]: {
  [stmt ::= RETURN expr SEMI (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [114]: {
  [printlinelist ::= (*) printlist , {CLOSEP }]
  [expr ::= (*) INTLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FALSE , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP type CLOSEP expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr PLUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID OPENSB expr CLOSESB , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [printlist ::= (*) expr COMMA readlist , {CLOSEP }]
  [expr ::= (*) ID OPENP CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FLOATLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) MINUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MULT expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GREATERTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr OR expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [printlinelist ::= (*) , {CLOSEP }]
  [expr ::= (*) CHARLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) binaryop , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MINUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr EQUALTO expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [printlist ::= (*) expr , {CLOSEP }]
  [expr ::= (*) ID OPENP args CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TRUE , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) PLUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr DIV expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [stmt ::= PRINTL OPENP (*) printlinelist CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [binaryop ::= (*) expr LEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr AND expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) name , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) STRLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TILDE expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LESSTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr ANGLEB expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on FLOATLIT to state [35]
transition on expr to state [117]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on printlinelist to state [116]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on printlist to state [115]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [115]: {
  [printlinelist ::= printlist (*) , {CLOSEP }]
}

-------------------
lalr_state [116]: {
  [stmt ::= PRINTL OPENP printlinelist (*) CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on CLOSEP to state [124]

-------------------
lalr_state [117]: {
  [binaryop ::= expr (*) OR expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LESSTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [printlist ::= expr (*) , {CLOSEP }]
  [binaryop ::= expr (*) DIV expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) ANGLEB expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [printlist ::= expr (*) COMMA readlist , {CLOSEP }]
  [binaryop ::= expr (*) MINUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MULT expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) AND expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) EQUALTO expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GREATERTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) PLUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on COMMA to state [118]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [118]: {
  [readlist ::= (*) name , {CLOSEP }]
  [readlist ::= (*) name COMMA args , {CLOSEP }]
  [name ::= (*) ID OPENSB expr CLOSESB , {COMMA CLOSEP }]
  [printlist ::= expr COMMA (*) readlist , {CLOSEP }]
  [name ::= (*) ID , {COMMA CLOSEP }]
}
transition on readlist to state [121]
transition on name to state [120]
transition on ID to state [119]

-------------------
lalr_state [119]: {
  [name ::= ID (*) OPENSB expr CLOSESB , {COMMA CLOSEP }]
  [name ::= ID (*) , {COMMA CLOSEP }]
}
transition on OPENSB to state [61]

-------------------
lalr_state [120]: {
  [readlist ::= name (*) , {CLOSEP }]
  [readlist ::= name (*) COMMA args , {CLOSEP }]
}
transition on COMMA to state [122]

-------------------
lalr_state [121]: {
  [printlist ::= expr COMMA readlist (*) , {CLOSEP }]
}

-------------------
lalr_state [122]: {
  [expr ::= (*) INTLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FALSE , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP type CLOSEP expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr PLUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID OPENSB expr CLOSESB , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FLOATLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) MINUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MULT expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GREATERTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr OR expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [readlist ::= name COMMA (*) args , {CLOSEP }]
  [expr ::= (*) CHARLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) binaryop , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MINUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr EQUALTO expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [args ::= (*) expr COMMA args , {CLOSEP }]
  [expr ::= (*) ID OPENP args CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TRUE , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) PLUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr DIV expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr AND expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) name , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) STRLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TILDE expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LESSTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr ANGLEB expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [args ::= (*) expr , {CLOSEP }]
}
transition on FLOATLIT to state [35]
transition on expr to state [66]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on args to state [123]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [123]: {
  [readlist ::= name COMMA args (*) , {CLOSEP }]
}

-------------------
lalr_state [124]: {
  [stmt ::= PRINTL OPENP printlinelist CLOSEP (*) SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on SEMI to state [125]

-------------------
lalr_state [125]: {
  [stmt ::= PRINTL OPENP printlinelist CLOSEP SEMI (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [126]: {
  [expr ::= (*) INTLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FALSE , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP type CLOSEP expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr PLUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID OPENSB expr CLOSESB , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [printlist ::= (*) expr COMMA readlist , {CLOSEP }]
  [expr ::= (*) ID OPENP CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FLOATLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) MINUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MULT expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [stmt ::= PRINT OPENP (*) printlist CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [binaryop ::= (*) expr GREATERTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr OR expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) CHARLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) binaryop , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MINUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr EQUALTO expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [printlist ::= (*) expr , {CLOSEP }]
  [expr ::= (*) ID OPENP args CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TRUE , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) PLUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr DIV expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr AND expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) name , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) STRLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TILDE expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LESSTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr ANGLEB expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on FLOATLIT to state [35]
transition on expr to state [117]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on printlist to state [127]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [127]: {
  [stmt ::= PRINT OPENP printlist (*) CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on CLOSEP to state [128]

-------------------
lalr_state [128]: {
  [stmt ::= PRINT OPENP printlist CLOSEP (*) SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on SEMI to state [129]

-------------------
lalr_state [129]: {
  [stmt ::= PRINT OPENP printlist CLOSEP SEMI (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [130]: {
  [expr ::= (*) INTLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FALSE , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP type CLOSEP expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr PLUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [stmt ::= ID OPENP (*) CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [binaryop ::= (*) expr GEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID OPENSB expr CLOSESB , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FLOATLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) MINUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MULT expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GREATERTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr OR expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) CHARLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) binaryop , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MINUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [stmt ::= ID OPENP (*) args CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [binaryop ::= (*) expr EQUALTO expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [args ::= (*) expr COMMA args , {CLOSEP }]
  [expr ::= (*) ID OPENP args CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TRUE , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) PLUS expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr DIV expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LEQ expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr AND expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) name , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) STRLIT , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TILDE expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LESSTHAN expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr ANGLEB expr , {COMMA CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [args ::= (*) expr , {CLOSEP }]
}
transition on FLOATLIT to state [35]
transition on expr to state [66]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on CLOSEP to state [132]
transition on ID to state [31]
transition on OPENP to state [30]
transition on args to state [131]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [131]: {
  [stmt ::= ID OPENP args (*) CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on CLOSEP to state [134]

-------------------
lalr_state [132]: {
  [stmt ::= ID OPENP CLOSEP (*) SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on SEMI to state [133]

-------------------
lalr_state [133]: {
  [stmt ::= ID OPENP CLOSEP SEMI (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [134]: {
  [stmt ::= ID OPENP args CLOSEP (*) SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on SEMI to state [135]

-------------------
lalr_state [135]: {
  [stmt ::= ID OPENP args CLOSEP SEMI (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [136]: {
  [expr ::= (*) INTLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FALSE , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP type CLOSEP expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr PLUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID OPENSB expr CLOSESB , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FLOATLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) MINUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MULT expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GREATERTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr OR expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) CHARLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) binaryop , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MINUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr EQUALTO expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP args CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TRUE , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [stmt ::= IF OPENP (*) expr CLOSEP stmt ifEnd , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [expr ::= (*) PLUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr DIV expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr AND expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) name , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) STRLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TILDE expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LESSTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr ANGLEB expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on FLOATLIT to state [35]
transition on expr to state [137]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [137]: {
  [binaryop ::= expr (*) OR expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LESSTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) DIV expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) ANGLEB expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MINUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MULT expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) AND expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [stmt ::= IF OPENP expr (*) CLOSEP stmt ifEnd , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [binaryop ::= expr (*) EQUALTO expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GREATERTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) PLUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on CLOSEP to state [138]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [138]: {
  [stmt ::= (*) name DECREMENT SEMI , {FI ELSE }]
  [stmt ::= (*) RETURN SEMI , {FI ELSE }]
  [stmt ::= (*) PRINTL OPENP printlinelist CLOSEP SEMI , {FI ELSE }]
  [stmt ::= (*) name ASSMNT expr SEMI , {FI ELSE }]
  [name ::= (*) ID OPENSB expr CLOSESB , {ASSMNT INCREMENT DECREMENT }]
  [stmt ::= (*) name INCREMENT SEMI , {FI ELSE }]
  [stmt ::= (*) ID OPENP args CLOSEP SEMI , {FI ELSE }]
  [stmt ::= (*) PRINT OPENP printlist CLOSEP SEMI , {FI ELSE }]
  [stmt ::= (*) WHILE OPENP expr CLOSEP stmt , {FI ELSE }]
  [name ::= (*) ID , {ASSMNT INCREMENT DECREMENT }]
  [stmt ::= (*) OPENCB fielddecls stmts CLOSECB optionalsemi , {FI ELSE }]
  [stmt ::= IF OPENP expr CLOSEP (*) stmt ifEnd , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) RETURN expr SEMI , {FI ELSE }]
  [stmt ::= (*) ID OPENP CLOSEP SEMI , {FI ELSE }]
  [stmt ::= (*) READ OPENP readlist CLOSEP SEMI , {FI ELSE }]
  [stmt ::= (*) IF OPENP expr CLOSEP stmt ifEnd , {FI ELSE }]
}
transition on RETURN to state [110]
transition on PRINTL to state [109]
transition on PRINT to state [108]
transition on ID to state [107]
transition on IF to state [106]
transition on stmt to state [139]
transition on OPENCB to state [104]
transition on name to state [102]
transition on WHILE to state [101]
transition on READ to state [100]

-------------------
lalr_state [139]: {
  [ifEnd ::= (*) FI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [ifEnd ::= (*) ELSE stmt FI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= IF OPENP expr CLOSEP stmt (*) ifEnd , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on ELSE to state [142]
transition on ifEnd to state [141]
transition on FI to state [140]

-------------------
lalr_state [140]: {
  [ifEnd ::= FI (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [141]: {
  [stmt ::= IF OPENP expr CLOSEP stmt ifEnd (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [142]: {
  [stmt ::= (*) name DECREMENT SEMI , {FI }]
  [stmt ::= (*) RETURN SEMI , {FI }]
  [stmt ::= (*) PRINTL OPENP printlinelist CLOSEP SEMI , {FI }]
  [stmt ::= (*) name ASSMNT expr SEMI , {FI }]
  [name ::= (*) ID OPENSB expr CLOSESB , {ASSMNT INCREMENT DECREMENT }]
  [ifEnd ::= ELSE (*) stmt FI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) name INCREMENT SEMI , {FI }]
  [stmt ::= (*) ID OPENP args CLOSEP SEMI , {FI }]
  [stmt ::= (*) PRINT OPENP printlist CLOSEP SEMI , {FI }]
  [stmt ::= (*) WHILE OPENP expr CLOSEP stmt , {FI }]
  [name ::= (*) ID , {ASSMNT INCREMENT DECREMENT }]
  [stmt ::= (*) OPENCB fielddecls stmts CLOSECB optionalsemi , {FI }]
  [stmt ::= (*) RETURN expr SEMI , {FI }]
  [stmt ::= (*) ID OPENP CLOSEP SEMI , {FI }]
  [stmt ::= (*) READ OPENP readlist CLOSEP SEMI , {FI }]
  [stmt ::= (*) IF OPENP expr CLOSEP stmt ifEnd , {FI }]
}
transition on RETURN to state [110]
transition on PRINTL to state [109]
transition on PRINT to state [108]
transition on ID to state [107]
transition on IF to state [106]
transition on stmt to state [143]
transition on OPENCB to state [104]
transition on name to state [102]
transition on WHILE to state [101]
transition on READ to state [100]

-------------------
lalr_state [143]: {
  [ifEnd ::= ELSE stmt (*) FI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on FI to state [144]

-------------------
lalr_state [144]: {
  [ifEnd ::= ELSE stmt FI (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [145]: {
  [stmts ::= stmt stmts (*) , {CLOSECB }]
}

-------------------
lalr_state [146]: {
  [stmt ::= (*) WHILE OPENP expr CLOSEP stmt , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) ID OPENP CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) name DECREMENT SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [name ::= (*) ID OPENSB expr CLOSESB , {ASSMNT INCREMENT DECREMENT }]
  [stmts ::= (*) , {CLOSECB }]
  [stmt ::= (*) PRINT OPENP printlist CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) RETURN expr SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= OPENCB fielddecls (*) stmts CLOSECB optionalsemi , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) name ASSMNT expr SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) ID OPENP args CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) OPENCB fielddecls stmts CLOSECB optionalsemi , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) IF OPENP expr CLOSEP stmt ifEnd , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) PRINTL OPENP printlinelist CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) name INCREMENT SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [name ::= (*) ID , {ASSMNT INCREMENT DECREMENT }]
  [stmts ::= (*) stmt stmts , {CLOSECB }]
  [stmt ::= (*) READ OPENP readlist CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) RETURN SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on RETURN to state [110]
transition on PRINTL to state [109]
transition on PRINT to state [108]
transition on ID to state [107]
transition on IF to state [106]
transition on stmt to state [105]
transition on OPENCB to state [104]
transition on stmts to state [147]
transition on name to state [102]
transition on WHILE to state [101]
transition on READ to state [100]

-------------------
lalr_state [147]: {
  [stmt ::= OPENCB fielddecls stmts (*) CLOSECB optionalsemi , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on CLOSECB to state [148]

-------------------
lalr_state [148]: {
  [optionalsemi ::= (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [optionalsemi ::= (*) SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= OPENCB fielddecls stmts CLOSECB (*) optionalsemi , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on SEMI to state [150]
transition on optionalsemi to state [149]

-------------------
lalr_state [149]: {
  [stmt ::= OPENCB fielddecls stmts CLOSECB optionalsemi (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [150]: {
  [optionalsemi ::= SEMI (*) , {VOID INT CHAR BOOL FLOAT IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [151]: {
  [optionalsemi ::= (*) , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [methoddecl ::= type ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB (*) optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [optionalsemi ::= (*) SEMI , {VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on SEMI to state [150]
transition on optionalsemi to state [152]

-------------------
lalr_state [152]: {
  [methoddecl ::= type ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi (*) , {VOID INT CHAR BOOL FLOAT CLOSECB }]
}

-------------------
lalr_state [153]: {
  [expr ::= (*) INTLIT , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FALSE , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP type CLOSEP expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr PLUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GEQ expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID OPENSB expr CLOSESB , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP CLOSEP , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FLOATLIT , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) MINUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MULT expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GREATERTHAN expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr OR expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) CHARLIT , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr CLOSEP , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) binaryop , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [stmt ::= name ASSMNT (*) expr SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [binaryop ::= (*) expr MINUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr EQUALTO expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP args CLOSEP , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TRUE , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) PLUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr DIV expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LEQ expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr AND expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) name , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) STRLIT , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TILDE expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LESSTHAN expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr ANGLEB expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on FLOATLIT to state [35]
transition on expr to state [158]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [154]: {
  [stmt ::= name DECREMENT (*) SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on SEMI to state [157]

-------------------
lalr_state [155]: {
  [stmt ::= name INCREMENT (*) SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on SEMI to state [156]

-------------------
lalr_state [156]: {
  [stmt ::= name INCREMENT SEMI (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [157]: {
  [stmt ::= name DECREMENT SEMI (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [158]: {
  [stmt ::= name ASSMNT expr (*) SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [binaryop ::= expr (*) OR expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GEQ expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LESSTHAN expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) DIV expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) ANGLEB expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LEQ expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MINUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MULT expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) AND expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) EQUALTO expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GREATERTHAN expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) PLUS expr , {SEMI MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on SEMI to state [159]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [159]: {
  [stmt ::= name ASSMNT expr SEMI (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [160]: {
  [expr ::= (*) INTLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FALSE , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP type CLOSEP expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [stmt ::= WHILE OPENP (*) expr CLOSEP stmt , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [binaryop ::= (*) expr PLUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID OPENSB expr CLOSESB , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) FLOATLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) MINUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MULT expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr GREATERTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr OR expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) CHARLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) binaryop , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr MINUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr EQUALTO expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) ID OPENP args CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TRUE , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) PLUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr DIV expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr AND expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [name ::= (*) ID , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) name , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) STRLIT , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) TILDE expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [expr ::= (*) OPENP expr QUESTIONMARK expr COLON expr CLOSEP , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr LESSTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= (*) expr ANGLEB expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on FLOATLIT to state [35]
transition on expr to state [161]
transition on CHARLIT to state [33]
transition on binaryop to state [32]
transition on ID to state [31]
transition on OPENP to state [30]
transition on FALSE to state [29]
transition on TILDE to state [28]
transition on PLUS to state [27]
transition on TRUE to state [26]
transition on STRLIT to state [25]
transition on INTLIT to state [24]
transition on name to state [23]
transition on MINUS to state [22]

-------------------
lalr_state [161]: {
  [binaryop ::= expr (*) OR expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LESSTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) DIV expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [stmt ::= WHILE OPENP expr (*) CLOSEP stmt , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [binaryop ::= expr (*) ANGLEB expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) LEQ expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MINUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) MULT expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) AND expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) EQUALTO expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) GREATERTHAN expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
  [binaryop ::= expr (*) PLUS expr , {CLOSEP MULT DIV PLUS MINUS LESSTHAN GREATERTHAN LEQ GEQ EQUALTO ANGLEB OR AND }]
}
transition on LEQ to state [47]
transition on OR to state [46]
transition on GEQ to state [45]
transition on LESSTHAN to state [44]
transition on CLOSEP to state [162]
transition on EQUALTO to state [43]
transition on DIV to state [42]
transition on GREATERTHAN to state [41]
transition on PLUS to state [40]
transition on MULT to state [39]
transition on ANGLEB to state [38]
transition on MINUS to state [37]
transition on AND to state [36]

-------------------
lalr_state [162]: {
  [stmt ::= (*) name DECREMENT SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) RETURN SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) PRINTL OPENP printlinelist CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) name ASSMNT expr SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [name ::= (*) ID OPENSB expr CLOSESB , {ASSMNT INCREMENT DECREMENT }]
  [stmt ::= WHILE OPENP expr CLOSEP (*) stmt , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) name INCREMENT SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) ID OPENP args CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) PRINT OPENP printlist CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) WHILE OPENP expr CLOSEP stmt , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [name ::= (*) ID , {ASSMNT INCREMENT DECREMENT }]
  [stmt ::= (*) OPENCB fielddecls stmts CLOSECB optionalsemi , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) RETURN expr SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) ID OPENP CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) READ OPENP readlist CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) IF OPENP expr CLOSEP stmt ifEnd , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on RETURN to state [110]
transition on PRINTL to state [109]
transition on PRINT to state [108]
transition on ID to state [107]
transition on IF to state [106]
transition on stmt to state [163]
transition on OPENCB to state [104]
transition on name to state [102]
transition on WHILE to state [101]
transition on READ to state [100]

-------------------
lalr_state [163]: {
  [stmt ::= WHILE OPENP expr CLOSEP stmt (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [164]: {
  [readlist ::= (*) name , {CLOSEP }]
  [stmt ::= READ OPENP (*) readlist CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
  [readlist ::= (*) name COMMA args , {CLOSEP }]
  [name ::= (*) ID OPENSB expr CLOSESB , {COMMA CLOSEP }]
  [name ::= (*) ID , {COMMA CLOSEP }]
}
transition on readlist to state [165]
transition on name to state [120]
transition on ID to state [119]

-------------------
lalr_state [165]: {
  [stmt ::= READ OPENP readlist (*) CLOSEP SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on CLOSEP to state [166]

-------------------
lalr_state [166]: {
  [stmt ::= READ OPENP readlist CLOSEP (*) SEMI , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on SEMI to state [167]

-------------------
lalr_state [167]: {
  [stmt ::= READ OPENP readlist CLOSEP SEMI (*) , {IF FI WHILE RETURN ELSE READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [168]: {
  [fielddecl ::= type ID (*) OPENSB INTLIT CLOSESB SEMI , {FINAL INT CHAR BOOL FLOAT }]
  [fielddecl ::= type ID (*) optionalexpr SEMI , {FINAL INT CHAR BOOL FLOAT }]
  [optionalexpr ::= (*) , {SEMI }]
  [optionalexpr ::= (*) ASSMNT expr , {SEMI }]
}
transition on optionalexpr to state [86]
transition on OPENSB to state [85]
transition on ASSMNT to state [19]

-------------------
lalr_state [169]: {
  [fielddecls ::= fielddecl fielddecls (*) , {VOID INT CHAR BOOL FLOAT IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
}

-------------------
lalr_state [170]: {
  [argdecl ::= type ID (*) OPENSB CLOSESB , {COMMA CLOSEP }]
  [argdecl ::= type ID (*) , {COMMA CLOSEP }]
}
transition on OPENSB to state [171]

-------------------
lalr_state [171]: {
  [argdecl ::= type ID OPENSB (*) CLOSESB , {COMMA CLOSEP }]
}
transition on CLOSESB to state [172]

-------------------
lalr_state [172]: {
  [argdecl ::= type ID OPENSB CLOSESB (*) , {COMMA CLOSEP }]
}

-------------------
lalr_state [173]: {
  [type ::= (*) FLOAT , {ID }]
  [type ::= (*) INT , {ID }]
  [argdecl ::= (*) type ID , {COMMA CLOSEP }]
  [type ::= (*) BOOL , {ID }]
  [argdeclList ::= (*) argdecl , {CLOSEP }]
  [type ::= (*) CHAR , {ID }]
  [argdeclList ::= argdecl COMMA (*) argdeclList , {CLOSEP }]
  [argdecl ::= (*) type ID OPENSB CLOSESB , {COMMA CLOSEP }]
  [argdeclList ::= (*) argdecl COMMA argdeclList , {CLOSEP }]
}
transition on INT to state [5]
transition on FLOAT to state [16]
transition on CHAR to state [15]
transition on BOOL to state [8]
transition on type to state [93]
transition on argdeclList to state [174]
transition on argdecl to state [91]

-------------------
lalr_state [174]: {
  [argdeclList ::= argdecl COMMA argdeclList (*) , {CLOSEP }]
}

-------------------
lalr_state [175]: {
  [memberdecls ::= fielddecls methoddecls (*) , {CLOSECB }]
}

-------------------
lalr_state [176]: {
  [methoddecl ::= type (*) ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on ID to state [177]

-------------------
lalr_state [177]: {
  [methoddecl ::= type ID (*) OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on OPENP to state [84]

-------------------
lalr_state [178]: {
  [methoddecl ::= VOID ID (*) OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on OPENP to state [179]

-------------------
lalr_state [179]: {
  [type ::= (*) FLOAT , {ID }]
  [type ::= (*) INT , {ID }]
  [argdecl ::= (*) type ID , {COMMA CLOSEP }]
  [argdecls ::= (*) , {CLOSEP }]
  [type ::= (*) BOOL , {ID }]
  [argdeclList ::= (*) argdecl , {CLOSEP }]
  [argdecls ::= (*) argdeclList , {CLOSEP }]
  [type ::= (*) CHAR , {ID }]
  [argdecl ::= (*) type ID OPENSB CLOSESB , {COMMA CLOSEP }]
  [methoddecl ::= VOID ID OPENP (*) argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [argdeclList ::= (*) argdecl COMMA argdeclList , {CLOSEP }]
}
transition on INT to state [5]
transition on argdecls to state [180]
transition on FLOAT to state [16]
transition on CHAR to state [15]
transition on BOOL to state [8]
transition on type to state [93]
transition on argdeclList to state [92]
transition on argdecl to state [91]

-------------------
lalr_state [180]: {
  [methoddecl ::= VOID ID OPENP argdecls (*) CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on CLOSEP to state [181]

-------------------
lalr_state [181]: {
  [methoddecl ::= VOID ID OPENP argdecls CLOSEP (*) OPENCB fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on OPENCB to state [182]

-------------------
lalr_state [182]: {
  [type ::= (*) FLOAT , {ID }]
  [type ::= (*) INT , {ID }]
  [fielddecl ::= (*) FINAL type ID optionalexpr SEMI , {FINAL INT CHAR BOOL FLOAT }]
  [fielddecls ::= (*) fielddecl fielddecls , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [type ::= (*) BOOL , {ID }]
  [fielddecl ::= (*) type ID OPENSB INTLIT CLOSESB SEMI , {FINAL INT CHAR BOOL FLOAT }]
  [type ::= (*) CHAR , {ID }]
  [fielddecl ::= (*) type ID optionalexpr SEMI , {FINAL INT CHAR BOOL FLOAT }]
  [methoddecl ::= VOID ID OPENP argdecls CLOSEP OPENCB (*) fielddecls stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on INT to state [5]
transition on FLOAT to state [16]
transition on CHAR to state [15]
transition on FINAL to state [14]
transition on BOOL to state [8]
transition on fielddecls to state [183]
transition on type to state [98]
transition on fielddecl to state [97]

-------------------
lalr_state [183]: {
  [stmt ::= (*) WHILE OPENP expr CLOSEP stmt , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) ID OPENP CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) name DECREMENT SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [name ::= (*) ID OPENSB expr CLOSESB , {ASSMNT INCREMENT DECREMENT }]
  [stmts ::= (*) , {CLOSECB }]
  [stmt ::= (*) PRINT OPENP printlist CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) RETURN expr SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [methoddecl ::= VOID ID OPENP argdecls CLOSEP OPENCB fielddecls (*) stmts CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [stmt ::= (*) name ASSMNT expr SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) ID OPENP args CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) OPENCB fielddecls stmts CLOSECB optionalsemi , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) IF OPENP expr CLOSEP stmt ifEnd , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) PRINTL OPENP printlinelist CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) name INCREMENT SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [name ::= (*) ID , {ASSMNT INCREMENT DECREMENT }]
  [stmts ::= (*) stmt stmts , {CLOSECB }]
  [stmt ::= (*) READ OPENP readlist CLOSEP SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
  [stmt ::= (*) RETURN SEMI , {IF WHILE RETURN READ PRINT PRINTL OPENCB CLOSECB ID }]
}
transition on RETURN to state [110]
transition on PRINTL to state [109]
transition on PRINT to state [108]
transition on ID to state [107]
transition on IF to state [106]
transition on stmt to state [105]
transition on OPENCB to state [104]
transition on stmts to state [184]
transition on name to state [102]
transition on WHILE to state [101]
transition on READ to state [100]

-------------------
lalr_state [184]: {
  [methoddecl ::= VOID ID OPENP argdecls CLOSEP OPENCB fielddecls stmts (*) CLOSECB optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on CLOSECB to state [185]

-------------------
lalr_state [185]: {
  [methoddecl ::= VOID ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB (*) optionalsemi , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [optionalsemi ::= (*) , {VOID INT CHAR BOOL FLOAT CLOSECB }]
  [optionalsemi ::= (*) SEMI , {VOID INT CHAR BOOL FLOAT CLOSECB }]
}
transition on SEMI to state [150]
transition on optionalsemi to state [186]

-------------------
lalr_state [186]: {
  [methoddecl ::= VOID ID OPENP argdecls CLOSEP OPENCB fielddecls stmts CLOSECB optionalsemi (*) , {VOID INT CHAR BOOL FLOAT CLOSECB }]
}

-------------------
lalr_state [187]: {
  [memberdecls ::= fielddecl methoddecls (*) , {CLOSECB }]
}

-------------------
lalr_state [188]: {
  [program ::= CLASS ID OPENCB memberdecls CLOSECB (*) , {EOF }]
}

-------------------
lalr_state [189]: {
  [methoddecls ::= methoddecl methoddecls (*) , {CLOSECB }]
}

-------------------
lalr_state [190]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 2:SHIFT(to state 2)]
From state #1
 [term 0:SHIFT(to state 190)]
From state #2
 [term 46:SHIFT(to state 3)]
From state #3
 [term 25:SHIFT(to state 4)]
From state #4
 [term 3:SHIFT(to state 14)] [term 4:SHIFT(to state 11)]
 [term 5:SHIFT(to state 5)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 8)] [term 8:SHIFT(to state 16)]
 [term 26:REDUCE(with prod 7)]
From state #5
 [term 22:REDUCE(with prod 17)] [term 46:REDUCE(with prod 17)]
From state #6
 [term 4:SHIFT(to state 11)] [term 5:SHIFT(to state 5)]
 [term 6:SHIFT(to state 15)] [term 7:SHIFT(to state 8)]
 [term 8:SHIFT(to state 16)] [term 26:REDUCE(with prod 7)]
From state #7
 [term 26:SHIFT(to state 188)]
From state #8
 [term 22:REDUCE(with prod 19)] [term 46:REDUCE(with prod 19)]
From state #9
 [term 3:SHIFT(to state 14)] [term 4:SHIFT(to state 11)]
 [term 5:SHIFT(to state 5)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 8)] [term 8:SHIFT(to state 16)]
 [term 26:REDUCE(with prod 7)]
From state #10
 [term 26:REDUCE(with prod 4)]
From state #11
 [term 46:SHIFT(to state 178)]
From state #12
 [term 4:SHIFT(to state 11)] [term 5:SHIFT(to state 5)]
 [term 6:SHIFT(to state 15)] [term 7:SHIFT(to state 8)]
 [term 8:SHIFT(to state 16)] [term 26:REDUCE(with prod 7)]
From state #13
 [term 46:SHIFT(to state 83)]
From state #14
 [term 5:SHIFT(to state 5)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 8)] [term 8:SHIFT(to state 16)]
From state #15
 [term 22:REDUCE(with prod 18)] [term 46:REDUCE(with prod 18)]
From state #16
 [term 22:REDUCE(with prod 20)] [term 46:REDUCE(with prod 20)]
From state #17
 [term 46:SHIFT(to state 18)]
From state #18
 [term 19:REDUCE(with prod 12)] [term 28:SHIFT(to state 19)]
From state #19
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #20
 [term 19:SHIFT(to state 21)]
From state #21
 [term 3:REDUCE(with prod 8)] [term 4:REDUCE(with prod 8)]
 [term 5:REDUCE(with prod 8)] [term 6:REDUCE(with prod 8)]
 [term 7:REDUCE(with prod 8)] [term 8:REDUCE(with prod 8)]
 [term 26:REDUCE(with prod 8)]
From state #22
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #23
 [term 19:REDUCE(with prod 54)] [term 20:REDUCE(with prod 54)]
 [term 22:REDUCE(with prod 54)] [term 24:REDUCE(with prod 54)]
 [term 29:REDUCE(with prod 54)] [term 30:REDUCE(with prod 54)]
 [term 31:REDUCE(with prod 54)] [term 32:REDUCE(with prod 54)]
 [term 33:REDUCE(with prod 54)] [term 34:REDUCE(with prod 54)]
 [term 35:REDUCE(with prod 54)] [term 36:REDUCE(with prod 54)]
 [term 37:REDUCE(with prod 54)] [term 38:REDUCE(with prod 54)]
 [term 39:REDUCE(with prod 54)] [term 40:REDUCE(with prod 54)]
 [term 43:REDUCE(with prod 54)] [term 44:REDUCE(with prod 54)]
From state #24
 [term 19:REDUCE(with prod 57)] [term 20:REDUCE(with prod 57)]
 [term 22:REDUCE(with prod 57)] [term 24:REDUCE(with prod 57)]
 [term 29:REDUCE(with prod 57)] [term 30:REDUCE(with prod 57)]
 [term 31:REDUCE(with prod 57)] [term 32:REDUCE(with prod 57)]
 [term 33:REDUCE(with prod 57)] [term 34:REDUCE(with prod 57)]
 [term 35:REDUCE(with prod 57)] [term 36:REDUCE(with prod 57)]
 [term 37:REDUCE(with prod 57)] [term 38:REDUCE(with prod 57)]
 [term 39:REDUCE(with prod 57)] [term 40:REDUCE(with prod 57)]
 [term 43:REDUCE(with prod 57)] [term 44:REDUCE(with prod 57)]
From state #25
 [term 19:REDUCE(with prod 59)] [term 20:REDUCE(with prod 59)]
 [term 22:REDUCE(with prod 59)] [term 24:REDUCE(with prod 59)]
 [term 29:REDUCE(with prod 59)] [term 30:REDUCE(with prod 59)]
 [term 31:REDUCE(with prod 59)] [term 32:REDUCE(with prod 59)]
 [term 33:REDUCE(with prod 59)] [term 34:REDUCE(with prod 59)]
 [term 35:REDUCE(with prod 59)] [term 36:REDUCE(with prod 59)]
 [term 37:REDUCE(with prod 59)] [term 38:REDUCE(with prod 59)]
 [term 39:REDUCE(with prod 59)] [term 40:REDUCE(with prod 59)]
 [term 43:REDUCE(with prod 59)] [term 44:REDUCE(with prod 59)]
From state #26
 [term 19:REDUCE(with prod 61)] [term 20:REDUCE(with prod 61)]
 [term 22:REDUCE(with prod 61)] [term 24:REDUCE(with prod 61)]
 [term 29:REDUCE(with prod 61)] [term 30:REDUCE(with prod 61)]
 [term 31:REDUCE(with prod 61)] [term 32:REDUCE(with prod 61)]
 [term 33:REDUCE(with prod 61)] [term 34:REDUCE(with prod 61)]
 [term 35:REDUCE(with prod 61)] [term 36:REDUCE(with prod 61)]
 [term 37:REDUCE(with prod 61)] [term 38:REDUCE(with prod 61)]
 [term 39:REDUCE(with prod 61)] [term 40:REDUCE(with prod 61)]
 [term 43:REDUCE(with prod 61)] [term 44:REDUCE(with prod 61)]
From state #27
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #28
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #29
 [term 19:REDUCE(with prod 62)] [term 20:REDUCE(with prod 62)]
 [term 22:REDUCE(with prod 62)] [term 24:REDUCE(with prod 62)]
 [term 29:REDUCE(with prod 62)] [term 30:REDUCE(with prod 62)]
 [term 31:REDUCE(with prod 62)] [term 32:REDUCE(with prod 62)]
 [term 33:REDUCE(with prod 62)] [term 34:REDUCE(with prod 62)]
 [term 35:REDUCE(with prod 62)] [term 36:REDUCE(with prod 62)]
 [term 37:REDUCE(with prod 62)] [term 38:REDUCE(with prod 62)]
 [term 39:REDUCE(with prod 62)] [term 40:REDUCE(with prod 62)]
 [term 43:REDUCE(with prod 62)] [term 44:REDUCE(with prod 62)]
From state #30
 [term 5:SHIFT(to state 5)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 8)] [term 8:SHIFT(to state 16)]
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #31
 [term 19:REDUCE(with prod 44)] [term 20:REDUCE(with prod 44)]
 [term 21:SHIFT(to state 60)] [term 22:REDUCE(with prod 44)]
 [term 23:SHIFT(to state 61)] [term 24:REDUCE(with prod 44)]
 [term 29:REDUCE(with prod 44)] [term 30:REDUCE(with prod 44)]
 [term 31:REDUCE(with prod 44)] [term 32:REDUCE(with prod 44)]
 [term 33:REDUCE(with prod 44)] [term 34:REDUCE(with prod 44)]
 [term 35:REDUCE(with prod 44)] [term 36:REDUCE(with prod 44)]
 [term 37:REDUCE(with prod 44)] [term 38:REDUCE(with prod 44)]
 [term 39:REDUCE(with prod 44)] [term 40:REDUCE(with prod 44)]
 [term 43:REDUCE(with prod 44)] [term 44:REDUCE(with prod 44)]
From state #32
 [term 19:REDUCE(with prod 68)] [term 20:REDUCE(with prod 68)]
 [term 22:REDUCE(with prod 68)] [term 24:REDUCE(with prod 68)]
 [term 29:REDUCE(with prod 68)] [term 30:REDUCE(with prod 68)]
 [term 31:REDUCE(with prod 68)] [term 32:REDUCE(with prod 68)]
 [term 33:REDUCE(with prod 68)] [term 34:REDUCE(with prod 68)]
 [term 35:REDUCE(with prod 68)] [term 36:REDUCE(with prod 68)]
 [term 37:REDUCE(with prod 68)] [term 38:REDUCE(with prod 68)]
 [term 39:REDUCE(with prod 68)] [term 40:REDUCE(with prod 68)]
 [term 43:REDUCE(with prod 68)] [term 44:REDUCE(with prod 68)]
From state #33
 [term 19:REDUCE(with prod 58)] [term 20:REDUCE(with prod 58)]
 [term 22:REDUCE(with prod 58)] [term 24:REDUCE(with prod 58)]
 [term 29:REDUCE(with prod 58)] [term 30:REDUCE(with prod 58)]
 [term 31:REDUCE(with prod 58)] [term 32:REDUCE(with prod 58)]
 [term 33:REDUCE(with prod 58)] [term 34:REDUCE(with prod 58)]
 [term 35:REDUCE(with prod 58)] [term 36:REDUCE(with prod 58)]
 [term 37:REDUCE(with prod 58)] [term 38:REDUCE(with prod 58)]
 [term 39:REDUCE(with prod 58)] [term 40:REDUCE(with prod 58)]
 [term 43:REDUCE(with prod 58)] [term 44:REDUCE(with prod 58)]
From state #34
 [term 19:REDUCE(with prod 11)] [term 29:SHIFT(to state 39)]
 [term 30:SHIFT(to state 42)] [term 31:SHIFT(to state 40)]
 [term 32:SHIFT(to state 37)] [term 33:SHIFT(to state 44)]
 [term 34:SHIFT(to state 41)] [term 35:SHIFT(to state 47)]
 [term 36:SHIFT(to state 45)] [term 37:SHIFT(to state 43)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 46)]
 [term 40:SHIFT(to state 36)]
From state #35
 [term 19:REDUCE(with prod 60)] [term 20:REDUCE(with prod 60)]
 [term 22:REDUCE(with prod 60)] [term 24:REDUCE(with prod 60)]
 [term 29:REDUCE(with prod 60)] [term 30:REDUCE(with prod 60)]
 [term 31:REDUCE(with prod 60)] [term 32:REDUCE(with prod 60)]
 [term 33:REDUCE(with prod 60)] [term 34:REDUCE(with prod 60)]
 [term 35:REDUCE(with prod 60)] [term 36:REDUCE(with prod 60)]
 [term 37:REDUCE(with prod 60)] [term 38:REDUCE(with prod 60)]
 [term 39:REDUCE(with prod 60)] [term 40:REDUCE(with prod 60)]
 [term 43:REDUCE(with prod 60)] [term 44:REDUCE(with prod 60)]
From state #36
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #37
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #38
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #39
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #40
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #41
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #42
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #43
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #44
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #45
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #46
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #47
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #48
 [term 19:REDUCE(with prod 76)] [term 20:REDUCE(with prod 76)]
 [term 22:REDUCE(with prod 76)] [term 24:REDUCE(with prod 76)]
 [term 29:REDUCE(with prod 76)] [term 30:REDUCE(with prod 76)]
 [term 31:REDUCE(with prod 76)] [term 32:REDUCE(with prod 76)]
 [term 33:REDUCE(with prod 76)] [term 34:REDUCE(with prod 76)]
 [term 35:REDUCE(with prod 76)] [term 36:REDUCE(with prod 76)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:REDUCE(with prod 76)] [term 40:REDUCE(with prod 76)]
 [term 43:REDUCE(with prod 76)] [term 44:REDUCE(with prod 76)]
From state #49
 [term 19:REDUCE(with prod 80)] [term 20:REDUCE(with prod 80)]
 [term 22:REDUCE(with prod 80)] [term 24:REDUCE(with prod 80)]
 [term 29:SHIFT(to state 39)] [term 30:SHIFT(to state 42)]
 [term 31:SHIFT(to state 40)] [term 32:SHIFT(to state 37)]
 [term 33:SHIFT(to state 44)] [term 34:SHIFT(to state 41)]
 [term 35:SHIFT(to state 47)] [term 36:SHIFT(to state 45)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:REDUCE(with prod 80)] [term 40:SHIFT(to state 36)]
 [term 43:REDUCE(with prod 80)] [term 44:REDUCE(with prod 80)]
From state #50
 [term 19:REDUCE(with prod 77)] [term 20:REDUCE(with prod 77)]
 [term 22:REDUCE(with prod 77)] [term 24:REDUCE(with prod 77)]
 [term 29:REDUCE(with prod 77)] [term 30:REDUCE(with prod 77)]
 [term 31:REDUCE(with prod 77)] [term 32:REDUCE(with prod 77)]
 [term 33:REDUCE(with prod 77)] [term 34:REDUCE(with prod 77)]
 [term 35:REDUCE(with prod 77)] [term 36:REDUCE(with prod 77)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:REDUCE(with prod 77)] [term 40:REDUCE(with prod 77)]
 [term 43:REDUCE(with prod 77)] [term 44:REDUCE(with prod 77)]
From state #51
 [term 19:REDUCE(with prod 74)] [term 20:REDUCE(with prod 74)]
 [term 22:REDUCE(with prod 74)] [term 24:REDUCE(with prod 74)]
 [term 29:REDUCE(with prod 74)] [term 30:REDUCE(with prod 74)]
 [term 31:REDUCE(with prod 74)] [term 32:REDUCE(with prod 74)]
 [term 33:REDUCE(with prod 74)] [term 34:REDUCE(with prod 74)]
 [term 35:REDUCE(with prod 74)] [term 36:REDUCE(with prod 74)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:REDUCE(with prod 74)] [term 40:REDUCE(with prod 74)]
 [term 43:REDUCE(with prod 74)] [term 44:REDUCE(with prod 74)]
From state #52
 [term 19:REDUCE(with prod 78)] [term 20:REDUCE(with prod 78)]
 [term 22:REDUCE(with prod 78)] [term 24:REDUCE(with prod 78)]
 [term 29:REDUCE(with prod 78)] [term 30:REDUCE(with prod 78)]
 [term 31:REDUCE(with prod 78)] [term 32:REDUCE(with prod 78)]
 [term 33:REDUCE(with prod 78)] [term 34:REDUCE(with prod 78)]
 [term 35:REDUCE(with prod 78)] [term 36:REDUCE(with prod 78)]
 [term 37:REDUCE(with prod 78)] [term 38:REDUCE(with prod 78)]
 [term 39:REDUCE(with prod 78)] [term 40:REDUCE(with prod 78)]
 [term 43:REDUCE(with prod 78)] [term 44:REDUCE(with prod 78)]
From state #53
 [term 19:REDUCE(with prod 71)] [term 20:REDUCE(with prod 71)]
 [term 22:REDUCE(with prod 71)] [term 24:REDUCE(with prod 71)]
 [term 29:REDUCE(with prod 71)] [term 30:REDUCE(with prod 71)]
 [term 31:REDUCE(with prod 71)] [term 32:REDUCE(with prod 71)]
 [term 33:SHIFT(to state 44)] [term 34:SHIFT(to state 41)]
 [term 35:SHIFT(to state 47)] [term 36:SHIFT(to state 45)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:REDUCE(with prod 71)] [term 40:REDUCE(with prod 71)]
 [term 43:REDUCE(with prod 71)] [term 44:REDUCE(with prod 71)]
From state #54
 [term 19:REDUCE(with prod 75)] [term 20:REDUCE(with prod 75)]
 [term 22:REDUCE(with prod 75)] [term 24:REDUCE(with prod 75)]
 [term 29:REDUCE(with prod 75)] [term 30:REDUCE(with prod 75)]
 [term 31:REDUCE(with prod 75)] [term 32:REDUCE(with prod 75)]
 [term 33:REDUCE(with prod 75)] [term 34:REDUCE(with prod 75)]
 [term 35:REDUCE(with prod 75)] [term 36:REDUCE(with prod 75)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:REDUCE(with prod 75)] [term 40:REDUCE(with prod 75)]
 [term 43:REDUCE(with prod 75)] [term 44:REDUCE(with prod 75)]
From state #55
 [term 19:REDUCE(with prod 72)] [term 20:REDUCE(with prod 72)]
 [term 22:REDUCE(with prod 72)] [term 24:REDUCE(with prod 72)]
 [term 29:SHIFT(to state 39)] [term 30:SHIFT(to state 42)]
 [term 31:REDUCE(with prod 72)] [term 32:REDUCE(with prod 72)]
 [term 33:SHIFT(to state 44)] [term 34:SHIFT(to state 41)]
 [term 35:SHIFT(to state 47)] [term 36:SHIFT(to state 45)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:REDUCE(with prod 72)] [term 40:REDUCE(with prod 72)]
 [term 43:REDUCE(with prod 72)] [term 44:REDUCE(with prod 72)]
From state #56
 [term 19:REDUCE(with prod 70)] [term 20:REDUCE(with prod 70)]
 [term 22:REDUCE(with prod 70)] [term 24:REDUCE(with prod 70)]
 [term 29:REDUCE(with prod 70)] [term 30:REDUCE(with prod 70)]
 [term 31:REDUCE(with prod 70)] [term 32:REDUCE(with prod 70)]
 [term 33:SHIFT(to state 44)] [term 34:SHIFT(to state 41)]
 [term 35:SHIFT(to state 47)] [term 36:SHIFT(to state 45)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:REDUCE(with prod 70)] [term 40:REDUCE(with prod 70)]
 [term 43:REDUCE(with prod 70)] [term 44:REDUCE(with prod 70)]
From state #57
 [term 19:REDUCE(with prod 79)] [term 20:REDUCE(with prod 79)]
 [term 22:REDUCE(with prod 79)] [term 24:REDUCE(with prod 79)]
 [term 29:REDUCE(with prod 79)] [term 30:REDUCE(with prod 79)]
 [term 31:REDUCE(with prod 79)] [term 32:REDUCE(with prod 79)]
 [term 33:REDUCE(with prod 79)] [term 34:REDUCE(with prod 79)]
 [term 35:REDUCE(with prod 79)] [term 36:REDUCE(with prod 79)]
 [term 37:REDUCE(with prod 79)] [term 38:REDUCE(with prod 79)]
 [term 39:REDUCE(with prod 79)] [term 40:REDUCE(with prod 79)]
 [term 43:REDUCE(with prod 79)] [term 44:REDUCE(with prod 79)]
From state #58
 [term 19:REDUCE(with prod 73)] [term 20:REDUCE(with prod 73)]
 [term 22:REDUCE(with prod 73)] [term 24:REDUCE(with prod 73)]
 [term 29:SHIFT(to state 39)] [term 30:SHIFT(to state 42)]
 [term 31:REDUCE(with prod 73)] [term 32:REDUCE(with prod 73)]
 [term 33:SHIFT(to state 44)] [term 34:SHIFT(to state 41)]
 [term 35:SHIFT(to state 47)] [term 36:SHIFT(to state 45)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:REDUCE(with prod 73)] [term 40:REDUCE(with prod 73)]
 [term 43:REDUCE(with prod 73)] [term 44:REDUCE(with prod 73)]
From state #59
 [term 19:REDUCE(with prod 81)] [term 20:REDUCE(with prod 81)]
 [term 22:REDUCE(with prod 81)] [term 24:REDUCE(with prod 81)]
 [term 29:SHIFT(to state 39)] [term 30:SHIFT(to state 42)]
 [term 31:SHIFT(to state 40)] [term 32:SHIFT(to state 37)]
 [term 33:SHIFT(to state 44)] [term 34:SHIFT(to state 41)]
 [term 35:SHIFT(to state 47)] [term 36:SHIFT(to state 45)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:REDUCE(with prod 81)] [term 40:REDUCE(with prod 81)]
 [term 43:REDUCE(with prod 81)] [term 44:REDUCE(with prod 81)]
From state #60
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 22:SHIFT(to state 65)]
 [term 27:SHIFT(to state 28)] [term 31:SHIFT(to state 27)]
 [term 32:SHIFT(to state 22)] [term 45:SHIFT(to state 24)]
 [term 46:SHIFT(to state 31)] [term 47:SHIFT(to state 33)]
 [term 48:SHIFT(to state 35)] [term 49:SHIFT(to state 25)]
From state #61
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #62
 [term 24:SHIFT(to state 63)] [term 29:SHIFT(to state 39)]
 [term 30:SHIFT(to state 42)] [term 31:SHIFT(to state 40)]
 [term 32:SHIFT(to state 37)] [term 33:SHIFT(to state 44)]
 [term 34:SHIFT(to state 41)] [term 35:SHIFT(to state 47)]
 [term 36:SHIFT(to state 45)] [term 37:SHIFT(to state 43)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 46)]
 [term 40:SHIFT(to state 36)]
From state #63
 [term 19:REDUCE(with prod 45)] [term 20:REDUCE(with prod 45)]
 [term 22:REDUCE(with prod 45)] [term 24:REDUCE(with prod 45)]
 [term 28:REDUCE(with prod 45)] [term 29:REDUCE(with prod 45)]
 [term 30:REDUCE(with prod 45)] [term 31:REDUCE(with prod 45)]
 [term 32:REDUCE(with prod 45)] [term 33:REDUCE(with prod 45)]
 [term 34:REDUCE(with prod 45)] [term 35:REDUCE(with prod 45)]
 [term 36:REDUCE(with prod 45)] [term 37:REDUCE(with prod 45)]
 [term 38:REDUCE(with prod 45)] [term 39:REDUCE(with prod 45)]
 [term 40:REDUCE(with prod 45)] [term 41:REDUCE(with prod 45)]
 [term 42:REDUCE(with prod 45)] [term 43:REDUCE(with prod 45)]
 [term 44:REDUCE(with prod 45)]
From state #64
 [term 22:SHIFT(to state 69)]
From state #65
 [term 19:REDUCE(with prod 55)] [term 20:REDUCE(with prod 55)]
 [term 22:REDUCE(with prod 55)] [term 24:REDUCE(with prod 55)]
 [term 29:REDUCE(with prod 55)] [term 30:REDUCE(with prod 55)]
 [term 31:REDUCE(with prod 55)] [term 32:REDUCE(with prod 55)]
 [term 33:REDUCE(with prod 55)] [term 34:REDUCE(with prod 55)]
 [term 35:REDUCE(with prod 55)] [term 36:REDUCE(with prod 55)]
 [term 37:REDUCE(with prod 55)] [term 38:REDUCE(with prod 55)]
 [term 39:REDUCE(with prod 55)] [term 40:REDUCE(with prod 55)]
 [term 43:REDUCE(with prod 55)] [term 44:REDUCE(with prod 55)]
From state #66
 [term 20:SHIFT(to state 67)] [term 22:REDUCE(with prod 47)]
 [term 29:SHIFT(to state 39)] [term 30:SHIFT(to state 42)]
 [term 31:SHIFT(to state 40)] [term 32:SHIFT(to state 37)]
 [term 33:SHIFT(to state 44)] [term 34:SHIFT(to state 41)]
 [term 35:SHIFT(to state 47)] [term 36:SHIFT(to state 45)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:SHIFT(to state 46)] [term 40:SHIFT(to state 36)]
From state #67
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #68
 [term 22:REDUCE(with prod 46)]
From state #69
 [term 19:REDUCE(with prod 56)] [term 20:REDUCE(with prod 56)]
 [term 22:REDUCE(with prod 56)] [term 24:REDUCE(with prod 56)]
 [term 29:REDUCE(with prod 56)] [term 30:REDUCE(with prod 56)]
 [term 31:REDUCE(with prod 56)] [term 32:REDUCE(with prod 56)]
 [term 33:REDUCE(with prod 56)] [term 34:REDUCE(with prod 56)]
 [term 35:REDUCE(with prod 56)] [term 36:REDUCE(with prod 56)]
 [term 37:REDUCE(with prod 56)] [term 38:REDUCE(with prod 56)]
 [term 39:REDUCE(with prod 56)] [term 40:REDUCE(with prod 56)]
 [term 43:REDUCE(with prod 56)] [term 44:REDUCE(with prod 56)]
From state #70
 [term 22:SHIFT(to state 74)] [term 29:SHIFT(to state 39)]
 [term 30:SHIFT(to state 42)] [term 31:SHIFT(to state 40)]
 [term 32:SHIFT(to state 37)] [term 33:SHIFT(to state 44)]
 [term 34:SHIFT(to state 41)] [term 35:SHIFT(to state 47)]
 [term 36:SHIFT(to state 45)] [term 37:SHIFT(to state 43)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 46)]
 [term 40:SHIFT(to state 36)] [term 43:SHIFT(to state 75)]
From state #71
 [term 22:SHIFT(to state 72)]
From state #72
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #73
 [term 19:REDUCE(with prod 67)] [term 20:REDUCE(with prod 67)]
 [term 22:REDUCE(with prod 67)] [term 24:REDUCE(with prod 67)]
 [term 29:SHIFT(to state 39)] [term 30:SHIFT(to state 42)]
 [term 31:SHIFT(to state 40)] [term 32:SHIFT(to state 37)]
 [term 33:SHIFT(to state 44)] [term 34:SHIFT(to state 41)]
 [term 35:SHIFT(to state 47)] [term 36:SHIFT(to state 45)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:SHIFT(to state 46)] [term 40:SHIFT(to state 36)]
 [term 43:REDUCE(with prod 67)] [term 44:REDUCE(with prod 67)]
From state #74
 [term 19:REDUCE(with prod 63)] [term 20:REDUCE(with prod 63)]
 [term 22:REDUCE(with prod 63)] [term 24:REDUCE(with prod 63)]
 [term 29:REDUCE(with prod 63)] [term 30:REDUCE(with prod 63)]
 [term 31:REDUCE(with prod 63)] [term 32:REDUCE(with prod 63)]
 [term 33:REDUCE(with prod 63)] [term 34:REDUCE(with prod 63)]
 [term 35:REDUCE(with prod 63)] [term 36:REDUCE(with prod 63)]
 [term 37:REDUCE(with prod 63)] [term 38:REDUCE(with prod 63)]
 [term 39:REDUCE(with prod 63)] [term 40:REDUCE(with prod 63)]
 [term 43:REDUCE(with prod 63)] [term 44:REDUCE(with prod 63)]
From state #75
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #76
 [term 29:SHIFT(to state 39)] [term 30:SHIFT(to state 42)]
 [term 31:SHIFT(to state 40)] [term 32:SHIFT(to state 37)]
 [term 33:SHIFT(to state 44)] [term 34:SHIFT(to state 41)]
 [term 35:SHIFT(to state 47)] [term 36:SHIFT(to state 45)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:SHIFT(to state 46)] [term 40:SHIFT(to state 36)]
 [term 44:SHIFT(to state 77)]
From state #77
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #78
 [term 22:SHIFT(to state 79)] [term 29:SHIFT(to state 39)]
 [term 30:SHIFT(to state 42)] [term 31:SHIFT(to state 40)]
 [term 32:SHIFT(to state 37)] [term 33:SHIFT(to state 44)]
 [term 34:SHIFT(to state 41)] [term 35:SHIFT(to state 47)]
 [term 36:SHIFT(to state 45)] [term 37:SHIFT(to state 43)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 46)]
 [term 40:SHIFT(to state 36)]
From state #79
 [term 19:REDUCE(with prod 69)] [term 20:REDUCE(with prod 69)]
 [term 22:REDUCE(with prod 69)] [term 24:REDUCE(with prod 69)]
 [term 29:REDUCE(with prod 69)] [term 30:REDUCE(with prod 69)]
 [term 31:REDUCE(with prod 69)] [term 32:REDUCE(with prod 69)]
 [term 33:REDUCE(with prod 69)] [term 34:REDUCE(with prod 69)]
 [term 35:REDUCE(with prod 69)] [term 36:REDUCE(with prod 69)]
 [term 37:REDUCE(with prod 69)] [term 38:REDUCE(with prod 69)]
 [term 39:REDUCE(with prod 69)] [term 40:REDUCE(with prod 69)]
 [term 43:REDUCE(with prod 69)] [term 44:REDUCE(with prod 69)]
From state #80
 [term 19:REDUCE(with prod 64)] [term 20:REDUCE(with prod 64)]
 [term 22:REDUCE(with prod 64)] [term 24:REDUCE(with prod 64)]
 [term 29:SHIFT(to state 39)] [term 30:SHIFT(to state 42)]
 [term 31:SHIFT(to state 40)] [term 32:SHIFT(to state 37)]
 [term 33:SHIFT(to state 44)] [term 34:SHIFT(to state 41)]
 [term 35:SHIFT(to state 47)] [term 36:SHIFT(to state 45)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:SHIFT(to state 46)] [term 40:SHIFT(to state 36)]
 [term 43:REDUCE(with prod 64)] [term 44:REDUCE(with prod 64)]
From state #81
 [term 19:REDUCE(with prod 66)] [term 20:REDUCE(with prod 66)]
 [term 22:REDUCE(with prod 66)] [term 24:REDUCE(with prod 66)]
 [term 29:SHIFT(to state 39)] [term 30:SHIFT(to state 42)]
 [term 31:REDUCE(with prod 66)] [term 32:REDUCE(with prod 66)]
 [term 33:SHIFT(to state 44)] [term 34:SHIFT(to state 41)]
 [term 35:SHIFT(to state 47)] [term 36:SHIFT(to state 45)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:REDUCE(with prod 66)] [term 40:REDUCE(with prod 66)]
 [term 43:REDUCE(with prod 66)] [term 44:REDUCE(with prod 66)]
From state #82
 [term 19:REDUCE(with prod 65)] [term 20:REDUCE(with prod 65)]
 [term 22:REDUCE(with prod 65)] [term 24:REDUCE(with prod 65)]
 [term 29:SHIFT(to state 39)] [term 30:SHIFT(to state 42)]
 [term 31:REDUCE(with prod 65)] [term 32:REDUCE(with prod 65)]
 [term 33:SHIFT(to state 44)] [term 34:SHIFT(to state 41)]
 [term 35:SHIFT(to state 47)] [term 36:SHIFT(to state 45)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:REDUCE(with prod 65)] [term 40:REDUCE(with prod 65)]
 [term 43:REDUCE(with prod 65)] [term 44:REDUCE(with prod 65)]
From state #83
 [term 19:REDUCE(with prod 12)] [term 21:SHIFT(to state 84)]
 [term 23:SHIFT(to state 85)] [term 28:SHIFT(to state 19)]
From state #84
 [term 5:SHIFT(to state 5)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 8)] [term 8:SHIFT(to state 16)]
 [term 22:REDUCE(with prod 22)]
From state #85
 [term 45:SHIFT(to state 88)]
From state #86
 [term 19:SHIFT(to state 87)]
From state #87
 [term 3:REDUCE(with prod 9)] [term 4:REDUCE(with prod 9)]
 [term 5:REDUCE(with prod 9)] [term 6:REDUCE(with prod 9)]
 [term 7:REDUCE(with prod 9)] [term 8:REDUCE(with prod 9)]
 [term 26:REDUCE(with prod 9)]
From state #88
 [term 24:SHIFT(to state 89)]
From state #89
 [term 19:SHIFT(to state 90)]
From state #90
 [term 3:REDUCE(with prod 10)] [term 4:REDUCE(with prod 10)]
 [term 5:REDUCE(with prod 10)] [term 6:REDUCE(with prod 10)]
 [term 7:REDUCE(with prod 10)] [term 8:REDUCE(with prod 10)]
 [term 26:REDUCE(with prod 10)]
From state #91
 [term 20:SHIFT(to state 173)] [term 22:REDUCE(with prod 24)]
From state #92
 [term 22:REDUCE(with prod 21)]
From state #93
 [term 46:SHIFT(to state 170)]
From state #94
 [term 22:SHIFT(to state 95)]
From state #95
 [term 25:SHIFT(to state 96)]
From state #96
 [term 3:SHIFT(to state 14)] [term 5:SHIFT(to state 5)]
 [term 6:SHIFT(to state 15)] [term 7:SHIFT(to state 8)]
 [term 8:SHIFT(to state 16)]
From state #97
 [term 3:SHIFT(to state 14)] [term 5:SHIFT(to state 5)]
 [term 6:SHIFT(to state 15)] [term 7:SHIFT(to state 8)]
 [term 8:SHIFT(to state 16)]
From state #98
 [term 46:SHIFT(to state 168)]
From state #99
 [term 9:SHIFT(to state 106)] [term 11:SHIFT(to state 101)]
 [term 12:SHIFT(to state 110)] [term 16:SHIFT(to state 100)]
 [term 17:SHIFT(to state 108)] [term 18:SHIFT(to state 109)]
 [term 25:SHIFT(to state 104)] [term 26:REDUCE(with prod 28)]
 [term 46:SHIFT(to state 107)]
From state #100
 [term 21:SHIFT(to state 164)]
From state #101
 [term 21:SHIFT(to state 160)]
From state #102
 [term 28:SHIFT(to state 153)] [term 41:SHIFT(to state 155)]
 [term 42:SHIFT(to state 154)]
From state #103
 [term 26:SHIFT(to state 151)]
From state #104
 [term 3:SHIFT(to state 14)] [term 5:SHIFT(to state 5)]
 [term 6:SHIFT(to state 15)] [term 7:SHIFT(to state 8)]
 [term 8:SHIFT(to state 16)]
From state #105
 [term 9:SHIFT(to state 106)] [term 11:SHIFT(to state 101)]
 [term 12:SHIFT(to state 110)] [term 16:SHIFT(to state 100)]
 [term 17:SHIFT(to state 108)] [term 18:SHIFT(to state 109)]
 [term 25:SHIFT(to state 104)] [term 26:REDUCE(with prod 28)]
 [term 46:SHIFT(to state 107)]
From state #106
 [term 21:SHIFT(to state 136)]
From state #107
 [term 21:SHIFT(to state 130)] [term 23:SHIFT(to state 61)]
 [term 28:REDUCE(with prod 44)] [term 41:REDUCE(with prod 44)]
 [term 42:REDUCE(with prod 44)]
From state #108
 [term 21:SHIFT(to state 126)]
From state #109
 [term 21:SHIFT(to state 114)]
From state #110
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 19:SHIFT(to state 111)] [term 21:SHIFT(to state 30)]
 [term 27:SHIFT(to state 28)] [term 31:SHIFT(to state 27)]
 [term 32:SHIFT(to state 22)] [term 45:SHIFT(to state 24)]
 [term 46:SHIFT(to state 31)] [term 47:SHIFT(to state 33)]
 [term 48:SHIFT(to state 35)] [term 49:SHIFT(to state 25)]
From state #111
 [term 9:REDUCE(with prod 37)] [term 10:REDUCE(with prod 37)]
 [term 11:REDUCE(with prod 37)] [term 12:REDUCE(with prod 37)]
 [term 13:REDUCE(with prod 37)] [term 16:REDUCE(with prod 37)]
 [term 17:REDUCE(with prod 37)] [term 18:REDUCE(with prod 37)]
 [term 25:REDUCE(with prod 37)] [term 26:REDUCE(with prod 37)]
 [term 46:REDUCE(with prod 37)]
From state #112
 [term 19:SHIFT(to state 113)] [term 29:SHIFT(to state 39)]
 [term 30:SHIFT(to state 42)] [term 31:SHIFT(to state 40)]
 [term 32:SHIFT(to state 37)] [term 33:SHIFT(to state 44)]
 [term 34:SHIFT(to state 41)] [term 35:SHIFT(to state 47)]
 [term 36:SHIFT(to state 45)] [term 37:SHIFT(to state 43)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 46)]
 [term 40:SHIFT(to state 36)]
From state #113
 [term 9:REDUCE(with prod 38)] [term 10:REDUCE(with prod 38)]
 [term 11:REDUCE(with prod 38)] [term 12:REDUCE(with prod 38)]
 [term 13:REDUCE(with prod 38)] [term 16:REDUCE(with prod 38)]
 [term 17:REDUCE(with prod 38)] [term 18:REDUCE(with prod 38)]
 [term 25:REDUCE(with prod 38)] [term 26:REDUCE(with prod 38)]
 [term 46:REDUCE(with prod 38)]
From state #114
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 22:REDUCE(with prod 53)]
 [term 27:SHIFT(to state 28)] [term 31:SHIFT(to state 27)]
 [term 32:SHIFT(to state 22)] [term 45:SHIFT(to state 24)]
 [term 46:SHIFT(to state 31)] [term 47:SHIFT(to state 33)]
 [term 48:SHIFT(to state 35)] [term 49:SHIFT(to state 25)]
From state #115
 [term 22:REDUCE(with prod 52)]
From state #116
 [term 22:SHIFT(to state 124)]
From state #117
 [term 20:SHIFT(to state 118)] [term 22:REDUCE(with prod 51)]
 [term 29:SHIFT(to state 39)] [term 30:SHIFT(to state 42)]
 [term 31:SHIFT(to state 40)] [term 32:SHIFT(to state 37)]
 [term 33:SHIFT(to state 44)] [term 34:SHIFT(to state 41)]
 [term 35:SHIFT(to state 47)] [term 36:SHIFT(to state 45)]
 [term 37:SHIFT(to state 43)] [term 38:SHIFT(to state 38)]
 [term 39:SHIFT(to state 46)] [term 40:SHIFT(to state 36)]
From state #118
 [term 46:SHIFT(to state 119)]
From state #119
 [term 20:REDUCE(with prod 44)] [term 22:REDUCE(with prod 44)]
 [term 23:SHIFT(to state 61)]
From state #120
 [term 20:SHIFT(to state 122)] [term 22:REDUCE(with prod 49)]
From state #121
 [term 22:REDUCE(with prod 50)]
From state #122
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #123
 [term 22:REDUCE(with prod 48)]
From state #124
 [term 19:SHIFT(to state 125)]
From state #125
 [term 9:REDUCE(with prod 34)] [term 10:REDUCE(with prod 34)]
 [term 11:REDUCE(with prod 34)] [term 12:REDUCE(with prod 34)]
 [term 13:REDUCE(with prod 34)] [term 16:REDUCE(with prod 34)]
 [term 17:REDUCE(with prod 34)] [term 18:REDUCE(with prod 34)]
 [term 25:REDUCE(with prod 34)] [term 26:REDUCE(with prod 34)]
 [term 46:REDUCE(with prod 34)]
From state #126
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #127
 [term 22:SHIFT(to state 128)]
From state #128
 [term 19:SHIFT(to state 129)]
From state #129
 [term 9:REDUCE(with prod 33)] [term 10:REDUCE(with prod 33)]
 [term 11:REDUCE(with prod 33)] [term 12:REDUCE(with prod 33)]
 [term 13:REDUCE(with prod 33)] [term 16:REDUCE(with prod 33)]
 [term 17:REDUCE(with prod 33)] [term 18:REDUCE(with prod 33)]
 [term 25:REDUCE(with prod 33)] [term 26:REDUCE(with prod 33)]
 [term 46:REDUCE(with prod 33)]
From state #130
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 22:SHIFT(to state 132)]
 [term 27:SHIFT(to state 28)] [term 31:SHIFT(to state 27)]
 [term 32:SHIFT(to state 22)] [term 45:SHIFT(to state 24)]
 [term 46:SHIFT(to state 31)] [term 47:SHIFT(to state 33)]
 [term 48:SHIFT(to state 35)] [term 49:SHIFT(to state 25)]
From state #131
 [term 22:SHIFT(to state 134)]
From state #132
 [term 19:SHIFT(to state 133)]
From state #133
 [term 9:REDUCE(with prod 35)] [term 10:REDUCE(with prod 35)]
 [term 11:REDUCE(with prod 35)] [term 12:REDUCE(with prod 35)]
 [term 13:REDUCE(with prod 35)] [term 16:REDUCE(with prod 35)]
 [term 17:REDUCE(with prod 35)] [term 18:REDUCE(with prod 35)]
 [term 25:REDUCE(with prod 35)] [term 26:REDUCE(with prod 35)]
 [term 46:REDUCE(with prod 35)]
From state #134
 [term 19:SHIFT(to state 135)]
From state #135
 [term 9:REDUCE(with prod 36)] [term 10:REDUCE(with prod 36)]
 [term 11:REDUCE(with prod 36)] [term 12:REDUCE(with prod 36)]
 [term 13:REDUCE(with prod 36)] [term 16:REDUCE(with prod 36)]
 [term 17:REDUCE(with prod 36)] [term 18:REDUCE(with prod 36)]
 [term 25:REDUCE(with prod 36)] [term 26:REDUCE(with prod 36)]
 [term 46:REDUCE(with prod 36)]
From state #136
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #137
 [term 22:SHIFT(to state 138)] [term 29:SHIFT(to state 39)]
 [term 30:SHIFT(to state 42)] [term 31:SHIFT(to state 40)]
 [term 32:SHIFT(to state 37)] [term 33:SHIFT(to state 44)]
 [term 34:SHIFT(to state 41)] [term 35:SHIFT(to state 47)]
 [term 36:SHIFT(to state 45)] [term 37:SHIFT(to state 43)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 46)]
 [term 40:SHIFT(to state 36)]
From state #138
 [term 9:SHIFT(to state 106)] [term 11:SHIFT(to state 101)]
 [term 12:SHIFT(to state 110)] [term 16:SHIFT(to state 100)]
 [term 17:SHIFT(to state 108)] [term 18:SHIFT(to state 109)]
 [term 25:SHIFT(to state 104)] [term 46:SHIFT(to state 107)]
From state #139
 [term 10:SHIFT(to state 140)] [term 13:SHIFT(to state 142)]
From state #140
 [term 9:REDUCE(with prod 43)] [term 10:REDUCE(with prod 43)]
 [term 11:REDUCE(with prod 43)] [term 12:REDUCE(with prod 43)]
 [term 13:REDUCE(with prod 43)] [term 16:REDUCE(with prod 43)]
 [term 17:REDUCE(with prod 43)] [term 18:REDUCE(with prod 43)]
 [term 25:REDUCE(with prod 43)] [term 26:REDUCE(with prod 43)]
 [term 46:REDUCE(with prod 43)]
From state #141
 [term 9:REDUCE(with prod 29)] [term 10:REDUCE(with prod 29)]
 [term 11:REDUCE(with prod 29)] [term 12:REDUCE(with prod 29)]
 [term 13:REDUCE(with prod 29)] [term 16:REDUCE(with prod 29)]
 [term 17:REDUCE(with prod 29)] [term 18:REDUCE(with prod 29)]
 [term 25:REDUCE(with prod 29)] [term 26:REDUCE(with prod 29)]
 [term 46:REDUCE(with prod 29)]
From state #142
 [term 9:SHIFT(to state 106)] [term 11:SHIFT(to state 101)]
 [term 12:SHIFT(to state 110)] [term 16:SHIFT(to state 100)]
 [term 17:SHIFT(to state 108)] [term 18:SHIFT(to state 109)]
 [term 25:SHIFT(to state 104)] [term 46:SHIFT(to state 107)]
From state #143
 [term 10:SHIFT(to state 144)]
From state #144
 [term 9:REDUCE(with prod 42)] [term 10:REDUCE(with prod 42)]
 [term 11:REDUCE(with prod 42)] [term 12:REDUCE(with prod 42)]
 [term 13:REDUCE(with prod 42)] [term 16:REDUCE(with prod 42)]
 [term 17:REDUCE(with prod 42)] [term 18:REDUCE(with prod 42)]
 [term 25:REDUCE(with prod 42)] [term 26:REDUCE(with prod 42)]
 [term 46:REDUCE(with prod 42)]
From state #145
 [term 26:REDUCE(with prod 27)]
From state #146
 [term 9:SHIFT(to state 106)] [term 11:SHIFT(to state 101)]
 [term 12:SHIFT(to state 110)] [term 16:SHIFT(to state 100)]
 [term 17:SHIFT(to state 108)] [term 18:SHIFT(to state 109)]
 [term 25:SHIFT(to state 104)] [term 26:REDUCE(with prod 28)]
 [term 46:SHIFT(to state 107)]
From state #147
 [term 26:SHIFT(to state 148)]
From state #148
 [term 9:REDUCE(with prod 16)] [term 10:REDUCE(with prod 16)]
 [term 11:REDUCE(with prod 16)] [term 12:REDUCE(with prod 16)]
 [term 13:REDUCE(with prod 16)] [term 16:REDUCE(with prod 16)]
 [term 17:REDUCE(with prod 16)] [term 18:REDUCE(with prod 16)]
 [term 19:SHIFT(to state 150)] [term 25:REDUCE(with prod 16)]
 [term 26:REDUCE(with prod 16)] [term 46:REDUCE(with prod 16)]
From state #149
 [term 9:REDUCE(with prod 41)] [term 10:REDUCE(with prod 41)]
 [term 11:REDUCE(with prod 41)] [term 12:REDUCE(with prod 41)]
 [term 13:REDUCE(with prod 41)] [term 16:REDUCE(with prod 41)]
 [term 17:REDUCE(with prod 41)] [term 18:REDUCE(with prod 41)]
 [term 25:REDUCE(with prod 41)] [term 26:REDUCE(with prod 41)]
 [term 46:REDUCE(with prod 41)]
From state #150
 [term 4:REDUCE(with prod 15)] [term 5:REDUCE(with prod 15)]
 [term 6:REDUCE(with prod 15)] [term 7:REDUCE(with prod 15)]
 [term 8:REDUCE(with prod 15)] [term 9:REDUCE(with prod 15)]
 [term 10:REDUCE(with prod 15)] [term 11:REDUCE(with prod 15)]
 [term 12:REDUCE(with prod 15)] [term 13:REDUCE(with prod 15)]
 [term 16:REDUCE(with prod 15)] [term 17:REDUCE(with prod 15)]
 [term 18:REDUCE(with prod 15)] [term 25:REDUCE(with prod 15)]
 [term 26:REDUCE(with prod 15)] [term 46:REDUCE(with prod 15)]
From state #151
 [term 4:REDUCE(with prod 16)] [term 5:REDUCE(with prod 16)]
 [term 6:REDUCE(with prod 16)] [term 7:REDUCE(with prod 16)]
 [term 8:REDUCE(with prod 16)] [term 19:SHIFT(to state 150)]
 [term 26:REDUCE(with prod 16)]
From state #152
 [term 4:REDUCE(with prod 13)] [term 5:REDUCE(with prod 13)]
 [term 6:REDUCE(with prod 13)] [term 7:REDUCE(with prod 13)]
 [term 8:REDUCE(with prod 13)] [term 26:REDUCE(with prod 13)]
From state #153
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #154
 [term 19:SHIFT(to state 157)]
From state #155
 [term 19:SHIFT(to state 156)]
From state #156
 [term 9:REDUCE(with prod 39)] [term 10:REDUCE(with prod 39)]
 [term 11:REDUCE(with prod 39)] [term 12:REDUCE(with prod 39)]
 [term 13:REDUCE(with prod 39)] [term 16:REDUCE(with prod 39)]
 [term 17:REDUCE(with prod 39)] [term 18:REDUCE(with prod 39)]
 [term 25:REDUCE(with prod 39)] [term 26:REDUCE(with prod 39)]
 [term 46:REDUCE(with prod 39)]
From state #157
 [term 9:REDUCE(with prod 40)] [term 10:REDUCE(with prod 40)]
 [term 11:REDUCE(with prod 40)] [term 12:REDUCE(with prod 40)]
 [term 13:REDUCE(with prod 40)] [term 16:REDUCE(with prod 40)]
 [term 17:REDUCE(with prod 40)] [term 18:REDUCE(with prod 40)]
 [term 25:REDUCE(with prod 40)] [term 26:REDUCE(with prod 40)]
 [term 46:REDUCE(with prod 40)]
From state #158
 [term 19:SHIFT(to state 159)] [term 29:SHIFT(to state 39)]
 [term 30:SHIFT(to state 42)] [term 31:SHIFT(to state 40)]
 [term 32:SHIFT(to state 37)] [term 33:SHIFT(to state 44)]
 [term 34:SHIFT(to state 41)] [term 35:SHIFT(to state 47)]
 [term 36:SHIFT(to state 45)] [term 37:SHIFT(to state 43)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 46)]
 [term 40:SHIFT(to state 36)]
From state #159
 [term 9:REDUCE(with prod 31)] [term 10:REDUCE(with prod 31)]
 [term 11:REDUCE(with prod 31)] [term 12:REDUCE(with prod 31)]
 [term 13:REDUCE(with prod 31)] [term 16:REDUCE(with prod 31)]
 [term 17:REDUCE(with prod 31)] [term 18:REDUCE(with prod 31)]
 [term 25:REDUCE(with prod 31)] [term 26:REDUCE(with prod 31)]
 [term 46:REDUCE(with prod 31)]
From state #160
 [term 14:SHIFT(to state 26)] [term 15:SHIFT(to state 29)]
 [term 21:SHIFT(to state 30)] [term 27:SHIFT(to state 28)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 22)]
 [term 45:SHIFT(to state 24)] [term 46:SHIFT(to state 31)]
 [term 47:SHIFT(to state 33)] [term 48:SHIFT(to state 35)]
 [term 49:SHIFT(to state 25)]
From state #161
 [term 22:SHIFT(to state 162)] [term 29:SHIFT(to state 39)]
 [term 30:SHIFT(to state 42)] [term 31:SHIFT(to state 40)]
 [term 32:SHIFT(to state 37)] [term 33:SHIFT(to state 44)]
 [term 34:SHIFT(to state 41)] [term 35:SHIFT(to state 47)]
 [term 36:SHIFT(to state 45)] [term 37:SHIFT(to state 43)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 46)]
 [term 40:SHIFT(to state 36)]
From state #162
 [term 9:SHIFT(to state 106)] [term 11:SHIFT(to state 101)]
 [term 12:SHIFT(to state 110)] [term 16:SHIFT(to state 100)]
 [term 17:SHIFT(to state 108)] [term 18:SHIFT(to state 109)]
 [term 25:SHIFT(to state 104)] [term 46:SHIFT(to state 107)]
From state #163
 [term 9:REDUCE(with prod 30)] [term 10:REDUCE(with prod 30)]
 [term 11:REDUCE(with prod 30)] [term 12:REDUCE(with prod 30)]
 [term 13:REDUCE(with prod 30)] [term 16:REDUCE(with prod 30)]
 [term 17:REDUCE(with prod 30)] [term 18:REDUCE(with prod 30)]
 [term 25:REDUCE(with prod 30)] [term 26:REDUCE(with prod 30)]
 [term 46:REDUCE(with prod 30)]
From state #164
 [term 46:SHIFT(to state 119)]
From state #165
 [term 22:SHIFT(to state 166)]
From state #166
 [term 19:SHIFT(to state 167)]
From state #167
 [term 9:REDUCE(with prod 32)] [term 10:REDUCE(with prod 32)]
 [term 11:REDUCE(with prod 32)] [term 12:REDUCE(with prod 32)]
 [term 13:REDUCE(with prod 32)] [term 16:REDUCE(with prod 32)]
 [term 17:REDUCE(with prod 32)] [term 18:REDUCE(with prod 32)]
 [term 25:REDUCE(with prod 32)] [term 26:REDUCE(with prod 32)]
 [term 46:REDUCE(with prod 32)]
From state #168
 [term 19:REDUCE(with prod 12)] [term 23:SHIFT(to state 85)]
 [term 28:SHIFT(to state 19)]
From state #169
 [term 4:REDUCE(with prod 5)] [term 5:REDUCE(with prod 5)]
 [term 6:REDUCE(with prod 5)] [term 7:REDUCE(with prod 5)]
 [term 8:REDUCE(with prod 5)] [term 9:REDUCE(with prod 5)]
 [term 11:REDUCE(with prod 5)] [term 12:REDUCE(with prod 5)]
 [term 16:REDUCE(with prod 5)] [term 17:REDUCE(with prod 5)]
 [term 18:REDUCE(with prod 5)] [term 25:REDUCE(with prod 5)]
 [term 26:REDUCE(with prod 5)] [term 46:REDUCE(with prod 5)]
From state #170
 [term 20:REDUCE(with prod 25)] [term 22:REDUCE(with prod 25)]
 [term 23:SHIFT(to state 171)]
From state #171
 [term 24:SHIFT(to state 172)]
From state #172
 [term 20:REDUCE(with prod 26)] [term 22:REDUCE(with prod 26)]
From state #173
 [term 5:SHIFT(to state 5)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 8)] [term 8:SHIFT(to state 16)]
From state #174
 [term 22:REDUCE(with prod 23)]
From state #175
 [term 26:REDUCE(with prod 2)]
From state #176
 [term 46:SHIFT(to state 177)]
From state #177
 [term 21:SHIFT(to state 84)]
From state #178
 [term 21:SHIFT(to state 179)]
From state #179
 [term 5:SHIFT(to state 5)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 8)] [term 8:SHIFT(to state 16)]
 [term 22:REDUCE(with prod 22)]
From state #180
 [term 22:SHIFT(to state 181)]
From state #181
 [term 25:SHIFT(to state 182)]
From state #182
 [term 3:SHIFT(to state 14)] [term 5:SHIFT(to state 5)]
 [term 6:SHIFT(to state 15)] [term 7:SHIFT(to state 8)]
 [term 8:SHIFT(to state 16)]
From state #183
 [term 9:SHIFT(to state 106)] [term 11:SHIFT(to state 101)]
 [term 12:SHIFT(to state 110)] [term 16:SHIFT(to state 100)]
 [term 17:SHIFT(to state 108)] [term 18:SHIFT(to state 109)]
 [term 25:SHIFT(to state 104)] [term 26:REDUCE(with prod 28)]
 [term 46:SHIFT(to state 107)]
From state #184
 [term 26:SHIFT(to state 185)]
From state #185
 [term 4:REDUCE(with prod 16)] [term 5:REDUCE(with prod 16)]
 [term 6:REDUCE(with prod 16)] [term 7:REDUCE(with prod 16)]
 [term 8:REDUCE(with prod 16)] [term 19:SHIFT(to state 150)]
 [term 26:REDUCE(with prod 16)]
From state #186
 [term 4:REDUCE(with prod 14)] [term 5:REDUCE(with prod 14)]
 [term 6:REDUCE(with prod 14)] [term 7:REDUCE(with prod 14)]
 [term 8:REDUCE(with prod 14)] [term 26:REDUCE(with prod 14)]
From state #187
 [term 26:REDUCE(with prod 3)]
From state #188
 [term 0:REDUCE(with prod 0)]
From state #189
 [term 26:REDUCE(with prod 6)]
From state #190
 [term 0:REDUCE(with prod 1)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 1]
From state #1
From state #2
From state #3
From state #4
 [non term 1->state 7] [non term 2->state 12] [non term 3->state 10]
 [non term 4->state 9] [non term 6->state 6] [non term 8->state 13]
From state #5
From state #6
 [non term 3->state 189] [non term 6->state 6] [non term 8->state 176]
From state #7
From state #8
From state #9
 [non term 2->state 169] [non term 3->state 187] [non term 4->state 97]
 [non term 6->state 6] [non term 8->state 13]
From state #10
From state #11
From state #12
 [non term 3->state 175] [non term 6->state 6] [non term 8->state 176]
From state #13
From state #14
 [non term 8->state 17]
From state #15
From state #16
From state #17
From state #18
 [non term 5->state 20]
From state #19
 [non term 15->state 23] [non term 20->state 34] [non term 21->state 32]
From state #20
From state #21
From state #22
 [non term 15->state 23] [non term 20->state 82] [non term 21->state 32]
From state #23
From state #24
From state #25
From state #26
From state #27
 [non term 15->state 23] [non term 20->state 81] [non term 21->state 32]
From state #28
 [non term 15->state 23] [non term 20->state 80] [non term 21->state 32]
From state #29
From state #30
 [non term 8->state 71] [non term 15->state 23] [non term 20->state 70]
 [non term 21->state 32]
From state #31
From state #32
From state #33
From state #34
From state #35
From state #36
 [non term 15->state 23] [non term 20->state 59] [non term 21->state 32]
From state #37
 [non term 15->state 23] [non term 20->state 58] [non term 21->state 32]
From state #38
 [non term 15->state 23] [non term 20->state 57] [non term 21->state 32]
From state #39
 [non term 15->state 23] [non term 20->state 56] [non term 21->state 32]
From state #40
 [non term 15->state 23] [non term 20->state 55] [non term 21->state 32]
From state #41
 [non term 15->state 23] [non term 20->state 54] [non term 21->state 32]
From state #42
 [non term 15->state 23] [non term 20->state 53] [non term 21->state 32]
From state #43
 [non term 15->state 23] [non term 20->state 52] [non term 21->state 32]
From state #44
 [non term 15->state 23] [non term 20->state 51] [non term 21->state 32]
From state #45
 [non term 15->state 23] [non term 20->state 50] [non term 21->state 32]
From state #46
 [non term 15->state 23] [non term 20->state 49] [non term 21->state 32]
From state #47
 [non term 15->state 23] [non term 20->state 48] [non term 21->state 32]
From state #48
From state #49
From state #50
From state #51
From state #52
From state #53
From state #54
From state #55
From state #56
From state #57
From state #58
From state #59
From state #60
 [non term 15->state 23] [non term 16->state 64] [non term 20->state 66]
 [non term 21->state 32]
From state #61
 [non term 15->state 23] [non term 20->state 62] [non term 21->state 32]
From state #62
From state #63
From state #64
From state #65
From state #66
From state #67
 [non term 15->state 23] [non term 16->state 68] [non term 20->state 66]
 [non term 21->state 32]
From state #68
From state #69
From state #70
From state #71
From state #72
 [non term 15->state 23] [non term 20->state 73] [non term 21->state 32]
From state #73
From state #74
From state #75
 [non term 15->state 23] [non term 20->state 76] [non term 21->state 32]
From state #76
From state #77
 [non term 15->state 23] [non term 20->state 78] [non term 21->state 32]
From state #78
From state #79
From state #80
From state #81
From state #82
From state #83
 [non term 5->state 86]
From state #84
 [non term 8->state 93] [non term 9->state 94] [non term 10->state 92]
 [non term 11->state 91]
From state #85
From state #86
From state #87
From state #88
From state #89
From state #90
From state #91
From state #92
From state #93
From state #94
From state #95
From state #96
 [non term 2->state 99] [non term 4->state 97] [non term 8->state 98]
From state #97
 [non term 2->state 169] [non term 4->state 97] [non term 8->state 98]
From state #98
From state #99
 [non term 12->state 103] [non term 13->state 105] [non term 15->state 102]
From state #100
From state #101
From state #102
From state #103
From state #104
 [non term 2->state 146] [non term 4->state 97] [non term 8->state 98]
From state #105
 [non term 12->state 145] [non term 13->state 105] [non term 15->state 102]
From state #106
From state #107
From state #108
From state #109
From state #110
 [non term 15->state 23] [non term 20->state 112] [non term 21->state 32]
From state #111
From state #112
From state #113
From state #114
 [non term 15->state 23] [non term 18->state 115] [non term 19->state 116]
 [non term 20->state 117] [non term 21->state 32]
From state #115
From state #116
From state #117
From state #118
 [non term 15->state 120] [non term 17->state 121]
From state #119
From state #120
From state #121
From state #122
 [non term 15->state 23] [non term 16->state 123] [non term 20->state 66]
 [non term 21->state 32]
From state #123
From state #124
From state #125
From state #126
 [non term 15->state 23] [non term 18->state 127] [non term 20->state 117]
 [non term 21->state 32]
From state #127
From state #128
From state #129
From state #130
 [non term 15->state 23] [non term 16->state 131] [non term 20->state 66]
 [non term 21->state 32]
From state #131
From state #132
From state #133
From state #134
From state #135
From state #136
 [non term 15->state 23] [non term 20->state 137] [non term 21->state 32]
From state #137
From state #138
 [non term 13->state 139] [non term 15->state 102]
From state #139
 [non term 14->state 141]
From state #140
From state #141
From state #142
 [non term 13->state 143] [non term 15->state 102]
From state #143
From state #144
From state #145
From state #146
 [non term 12->state 147] [non term 13->state 105] [non term 15->state 102]
From state #147
From state #148
 [non term 7->state 149]
From state #149
From state #150
From state #151
 [non term 7->state 152]
From state #152
From state #153
 [non term 15->state 23] [non term 20->state 158] [non term 21->state 32]
From state #154
From state #155
From state #156
From state #157
From state #158
From state #159
From state #160
 [non term 15->state 23] [non term 20->state 161] [non term 21->state 32]
From state #161
From state #162
 [non term 13->state 163] [non term 15->state 102]
From state #163
From state #164
 [non term 15->state 120] [non term 17->state 165]
From state #165
From state #166
From state #167
From state #168
 [non term 5->state 86]
From state #169
From state #170
From state #171
From state #172
From state #173
 [non term 8->state 93] [non term 10->state 174] [non term 11->state 91]
From state #174
From state #175
From state #176
From state #177
From state #178
From state #179
 [non term 8->state 93] [non term 9->state 180] [non term 10->state 92]
 [non term 11->state 91]
From state #180
From state #181
From state #182
 [non term 2->state 183] [non term 4->state 97] [non term 8->state 98]
From state #183
 [non term 12->state 184] [non term 13->state 105] [non term 15->state 102]
From state #184
From state #185
 [non term 7->state 186]
From state #186
From state #187
From state #188
From state #189
From state #190
-----------------------------
------- CUP v0.11b 20160615 (GIT 4ac7450) Parser Generation Summary -------
  0 errors and 0 warnings
  50 terminals, 22 non-terminals, and 82 productions declared, 
  producing 191 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (CUP v0.11b 20160615 (GIT 4ac7450))
